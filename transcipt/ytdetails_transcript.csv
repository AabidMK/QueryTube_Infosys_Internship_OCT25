videoId,title,description,publishedAt,tags,categoryId,defaultLanguage,defaultAudioLanguage,thumbnail,duration,viewCount,likeCount,commentCount,privacyStatus,transcript,is_transcript_available
bshe96X5KkA,AI Course for Developers - Build AI-Powered Apps,"‚ù§Ô∏è Join this channel to get access to perks:
https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join

‚úã Stay connected:
- Full Courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/",2025-08-26T12:30:47Z,"ai course, learn ai, ai course for developers, ai engineering, generative ai, ai developer, open ai, openai, ai for beginners, ai full course, large language models, llms, code with mosh, programming with mosh, mosh hamedani, web development, programming",27.0,en,en,https://i.ytimg.com/vi/bshe96X5KkA/default.jpg,PT1M6S,19499.0,696.0,11.0,public,"[Music] AI is everywhere, but have you actually built something with it? In this course, you will learn how to build real AI powered features like the ones you see in apps from Google, Amazon, and beyond. We'll start by building a solid foundation, understanding language models, tokens, context windows, choosing the right models, model settings, and prompt engineering. Then we'll build projects starting with a chatbot that can answer questions about an imaginary theme park, helping visitors find what they need faster. Next, we'll create a tool that analyzes customer feedback and delivers clear, actionable insights so users can make shorter decisions in seconds. And finally, we'll wrap up with powerful open-source integrations you can run anywhere. Along the way, you will learn clean architecture principles, follow best practices, and work with modern tools like Bun, Tailwind, Shatian, Prisma, and Olama. By the end, you will have the skills and confidence to build AI powered apps people actually want to use. Watch the full video on my YouTube channel.",True
PtETUYa3i2Q,AI Course for Developers ‚Äì Build AI-Powered Apps with React,"This AI course teaches you how to build AI-powered apps with React & Express. You‚Äôll learn about LLMs, prompt engineering, and full-stack AI integration.

üöÄ Want to dive deeper?
- Get the full course: https://mosh.link/build-ai-powered-apps
- Subscribe for more videos like this: https://goo.gl/6PYaGF

üí° Related tutorials 
https://youtu.be/SqcY0GlETPk?si=ALGbprFSjzSnVfms
https://youtu.be/d56mG7DezGs?si=NamrMlwEwC99MIfQ

‚úã Stay connected:
- Full Courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üìñ Chapters 
0:00:00 Welcome
0:01:26 Prerequisites
0:02:21 What You‚Äôll Learn
0:06:15 Setting Up Your Development Environment
0:07:12 Introduction to AI Models
0:07:48 Rise of AI Engineering
0:11:49 What Are Large Language Models?
0:16:12 What Can You Do With Language Models?
0:18:37 Understanding Tokens
0:21:40 Counting Tokens
0:25:43 Choosing the Right Model
0:30:45 Understanding Model Settings
0:39:32 Calling Models
0:47:07 Setting Up a Modern Full-Stack Project
0:48:19 Setting Up Bun
0:49:51 Creating the Project Structure
0:52:39 Creating the Backend
0:59:18 Managing OpenAI API Key
1:04:33 Creating the Frontend
1:07:18 Connecting the Frontend and Backend
1:12:31 Running Both Apps Together
1:15:55 Setting Up TailwindCSS
1:19:30 Setting Up ShadCN/UI
1:26:00 Formatting Code With Prettier
1:31:02 Automating Pre-Commit Checks With Husky
1:37:53 Project: Building a ChatBot
1:38:22 Building the Backend
1:38:58 Building the Chat API
1:45:25 Testing the API
1:47:22 Managing Conversation State
1:53:44 Input Validation
1:59:33 Error Handling
2:01:52 Refactoring the Chat API
2:04:00 Extracting Conversation Repository
2:09:21 Extracting Chat Service
2:16:05 Extracting Chat Controller
2:20:03 Extracting Routes
2:24:55 Building the Frontend

#ai #aiappdevelopment #aicourses",2025-08-25T12:30:06Z,"ai course, learn ai, ai course for developers, ai engineering, react js, react.js, full-stack development, code with mosh, programming with mosh, mosh hamedani, large language models, llm, ai, genai, reactjs, generative ai, llms, gen ai, artificial intelligence, ai engineer, ai full course, ai for beginners, openai, ai developer, ai applications, programming, chatbots",27.0,en,en,https://i.ytimg.com/vi/PtETUYa3i2Q/default.jpg,PT2H25M40S,71159.0,2594.0,180.0,public,,False
V7TMkZH1AkM,A Practical AI Course for Developers is Coming...,"I‚Äôve been working on something special ‚Äî can‚Äôt wait to share it with you soon. Watch this space.

‚ù§Ô∏è Join this channel to get access to perks:
https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join

‚úã Stay connected:
- Full Courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/",2025-08-18T23:46:05Z,"react tutorial, react course, ai engineer, ai, learn ai, ai course, software engineering, code with mosh, programming with mosh, mosh hamedani",27.0,en,en,https://i.ytimg.com/vi/V7TMkZH1AkM/default.jpg,PT51S,31458.0,1616.0,159.0,public,"[Music] Hey friends, I've got something exciting to share. I'm working on a brand new course where we'll build AI powered apps together step by step. We'll start with the basics like what large language models are and how they work, and then jump straight into projects. You'll build a chatbot that can answer real questions, a tool that makes sense of customer feedback in seconds, and even learn how to run open-source models right on your own machine. And don't worry, this isn't one of those watch me paste prompts into chat GPT kind of courses. You'll be coding along with me, learning the techniques, best practices, and modern tools you can actually use in your own applications. If you have been curious about AI and want to add it to your developer toolkit, this course is for you. I can't wait to share it with you. It's coming very soon.",True
h4FRpDGuJyI,"Microsoft laid off 6,000 people‚Ä¶ but why?","Everyone‚Äôs talking about the layoffs ‚Äî but no one‚Äôs asking the right questions. This goes way deeper than AI. Let‚Äôs break it down.

Level up your coding skills: https://codewithmosh.com

‚úã Stay connected:
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/",2025-05-20T11:30:41Z,"layoffs, microsoft layoffs, tech industry layoffs, layoffs in tech, tech layoffs, intel layoffs, amazon layoffs, tech job, tech, tech jobs, navigating layoffs, code with mosh, programming with mosh, mosh hamedani, artificial intelligence, ai jobs, ai job loss",27.0,en,en,https://i.ytimg.com/vi/h4FRpDGuJyI/default.jpg,PT3M53S,92541.0,4319.0,377.0,public,"Microsoft just laid off 6,000 employees and the internet has always freaked out. You have probably seen the headlines. AI is replacing all the developers. Tech is dead. But before we join the panic, let's take a breath and look at what's actually happening. First, let's get something straight. Tech layoffs like this aren't new. They have been happening for years, long before AI was a buzzword. Let me give you a quick history lesson. In 2014, Microsoft laid off 18,000 people after buying Nokia. In 2015, HP cut 30,000 jobs during a big restructuring. In 2016, Intel let go of 12,000 employees as it moved away from PCs. IBM, Yahoo, and plenty of others have done the same. Companies change direction. They restructure. They cut costs. Layoffs like these are about strategy, not science fiction. Take Intel for example. When they cut those 12,000 jobs in 2016, they weren't just shrinking. They were moving into new areas. cloud computing and smart devices. And over time, that shift created thousands of new jobs in those gross sectors. That's what a pivot looks like. Letting go in one area to reinvest in another. But of course, social media clowns turn it into something bigger than it really is. They didn't waste a second before yelling AI took their jobs, developers are finished. And it's not just them. Plenty of news outlets do the same. Spin fear into clicks because fear gets attention. They're not trying to explain what's actually happening. They're just chasing views. Honestly, it reminds me of the vaccine panic a few years ago. Remember that? For a while, everything was the vaccine's fault. Heart attacks, car crashes, even bad weather. Someone stubbed their toe, must be the vaccine. Now, it's AI's turn. Something goes wrong in tech, blame AI. Production goes down, that's AI, too. Same fear, different label. Here's the truth. The tech industry is still growing. Companies still need engineers, not just people who know how to write code. I'm talking about real engineers. People who can think clearly, write clean, maintainable code, understand how systems behave, and solve real world problems. With AI in the picture, we're entering a new chapter of software development. We'll be building tools and platforms we can't even imagine today. And guess what? Those tools will create new challenges. And those challenges will need you, thoughtful, capable engineers to solve them. If you want to keep growing in the industry and stay employable, you need real skills, solid fundamentals, deep understanding of how things work under the hood. Unfortunately, VIP coding has become a trend lately. You have seen it. People pasting prompts into an LLM and calling themselves engineers. They don't understand data structures, design patterns, system design, security, or even how to debug. It's like trying to fly a plane with no idea how the controls work. And here's the thing, companies aren't going to pay you for vibes. They're going to pay you for what you actually know. The demands on engineers are going up, not down. Back in the 80s or '90s, most dev job listings focus on knowing one language, a bit of databases, maybe some basic algorithms. But today, you have to know multiple languages, frameworks, CI/CD, cloud platforms, architecture, APIs, security, automated testing, the list goes on. And tomorrow it'll be even more. If all we can do is copy paste code from a chatbot without understanding how it works, you're not just replaceable. You are irrelevant. So if all the noise lately has left you feeling anxious, don't let it. Don't let the social media clowns get to you. Don't let fear-based headlines distract you. Stay curious, keep learning, keep growing. The future doesn't belong to people yelling on the internet. It belongs to the ones who show up, level up, and keep building. If this gave you some clarity, please share it to help others. Now, let's get back to work and build something great. I will see you in the next one.",True
EWd3_I4X32g,Spring Boot Project: Build a REST API for an E-commerce Platform,"Learn how to build a REST API for an e-commerce platform. Perfect for Java developers looking to enhance their skills with hands-on Spring Boot projects!

üöÄ Want to dive deeper?
- Get the full course: https://mosh.link/spring-boot-api-development
- Subscribe for more videos like this: https://goo.gl/6PYaGF

üí° Related tutorials 
https://youtu.be/gJrjgg1KVL4?si=bgsORKFCW0utvTEZ
https://youtu.be/eIrMbAQSU34?si=Uw0R6GZ4DM0sanYR
https://youtu.be/7S_tz1z_5bA?si=RvQs6awyciFtDeel

‚úã Stay connected:
- Full Courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üìñ Table of Content
0:00:00 Welcome
0:01:31 What You‚Äôll Learn
0:03:41 Prerequisites
0:04:59 Starter Project
0:09:07 How to Take This Course
0:10:29 Spring MVC
0:11:19 How the Web Works
0:16:31 What is Spring MVC?
0:18:09 Creating a Controller
0:22:23 View Templates
0:25:50 Passing Data to Views
0:27:49 Building an API
0:32:18 Spring Boot Course
0:32:51 RESTful APIs
0:33:49 Creating Your First RESTful API
0:37:49 Calling APIs with Postman
0:40:25 Creating Dynamic Routes
0:43:54 Setting HTTP Status Codes
0:46:56 Data Transfer Objects
0:51:47 Mapping Objects Using MapStruct
0:56:43 Customizing Response Data
1:01:45 Extracting Query Parameters
1:09:58 Exercise: Building Product Endpoints
1:20:17 Extracting Request Headers
1:23:07 Extracting Request Body
1:26:25 Creating Resources
1:35:52 Updating Resources
1:41:38 Deleting Resources
1:43:31 Handling Action-Based Updates
1:48:25 Exercise: Building a CRUD API
1:59:40 Spring Boot Course

#springboot #java #backend",2025-04-16T21:49:36Z,"spring boot project, spring boot crash course, spring boot 3.0, spring boot advanced, mosh hamedani, programming with mosh, code with mosh, spring boot, java, spring boot full course, spring boot tutorial, spring framework",27.0,en,en,https://i.ytimg.com/vi/EWd3_I4X32g/default.jpg,PT2H17S,142630.0,2648.0,122.0,public,,False
M5B-xBmznok,Part 2 of my Spring Boot course dropping soon!,"‚ù§Ô∏è Join this channel to get access to perks:
https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join

‚úã Stay connected:
- Full Courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/",2025-04-16T12:30:33Z,,27.0,en,en,https://i.ytimg.com/vi/M5B-xBmznok/default.jpg,PT45S,18684.0,665.0,10.0,public,"Hey guys, many of you have been waiting for part two of my spring boot series and I just wanted to let you know that it's coming very soon. In this part, we'll build the back end for real e-commerce application complete with authentication, role-based access control, a shopping cart and checkout system, payment processing with Stripe, and full deployment to the cloud. You'll learn how to build secure productionready APIs, and more importantly, how to organize and structure your code like a professional developer. I've put my heart and soul into creating this course to make it the most practical and comprehensive Spring Boot course out there and to help you level up your skills and confidence as a back-end developer. Stay tuned. It's launching very soon.",True
Iqz7BWePOys,How Spring Boot Can Be A Game Changer For Your Career,,2025-03-12T13:48:34Z,"what is spring boot, spring boot tutorial, spring boot, getting started with spring boot, what is spring mvc, spring vs spring boot, spring boot java, java frameworks, programming, java spring boot, introduction to spring boot, what is spring boot in java, programming with mosh, code with mosh, mosh hamedani, spring boot in 1 minute, learn spring boot, spring boot vs spring framework",27.0,en,en,https://i.ytimg.com/vi/Iqz7BWePOys/default.jpg,PT2M50S,20534.0,1925.0,19.0,public,"hey everyone msh here a few days ago I published a spring boot tutorial on this channel and some of you asked what is spring Boot and why should I learn it great questions let's start with the spring framework because to really understand spring boot you need to know where it comes from Spring is one of the most popular Frameworks for building Java applications think of it like a toolbox it's got everything you need to build scalable Enterprise grade applications and it's modular which means you can pick and choose the modules you need these modules are broadly categorized into a few different layers at the core we have modules for handling dependency injection and managing objects I know it might sound confusing but trust me I've covered this in depth in my spring boot course it's not really that complicated in the web layer we have modules for building web applications with these modules we can handle HTTP requests process data and return responses whether it's HTML for a web page or Json for an API in the data layer we have modules for working with databases whether you're using SQL no SQL or even inmemory data basis we also have a module for adding cross cutting features like logging or security without cluttering the main code this is called aop or aspect oriented programming we also have spring test for testing of spring components so a spring is amazing but it comes with a catch it requires a lot of setup for example if you want to build a web application you might need to set up a web server configure routing and manage dependencies manually this can make development slower and more complex and that's exactly why spring boot was created spring boot is a layer on top of spring that removes all the painful setup think of it like this if spring is a toolbox spring boot is a preassembled workstation instead of spending hours setting things up you can just start coding right away it comes with sensible defaults Auto configuration and embedded servers so you can go from an idea to a working application in minutes that's why spring boot is one of the most widely used Java Frameworks in the industry major companies like Netflix Amazon and Google rely on it to build scalable applications and because of that spring boot developers get paid really well according to glass store Spring boot developers earn between 160,000 and $300,000 a year which is huge if you're a Java developer learning spring boot can open up better job opportunities and higher salaries so now that you know why spring boot is so valuable the next step is learning it properly I've just uploaded the first hour of my spring boot course for free on YouTube where I walk you through the fundamentals step by step I'll put the link for you in the description box",True
v73-ps01c5w,How Spring Boot Can Be A Game Changer For Your Career,"Learn how Spring Boot simplifies Java development and why it's a must-have skill for developers!

üöÄ Want to build your first Spring Boot application? Watch my tutorial here: https://youtu.be/gJrjgg1KVL4?si=iyduMaeArvy2xlJg

‚ù§Ô∏è Join this channel to get access to perks:
https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join

‚úã Stay connected:
- Full Courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

#springboot #java #backend",2025-03-04T12:01:21Z,"what is spring boot, spring boot tutorial, spring boot, getting started with spring boot, what is spring mvc, spring vs spring boot, spring boot java, java frameworks, programming, java spring boot, introduction to spring boot, what is spring boot in java, programming with mosh, code with mosh, mosh hamedani, spring boot in 1 minute, learn spring boot, spring boot vs spring framework",27.0,en,en,https://i.ytimg.com/vi/v73-ps01c5w/default.jpg,PT4M5S,73741.0,1822.0,94.0,public,"hey everyone msh here a few days ago I published a spring boot tutorial on this channel and some of you asked what is spring Boot and why should I learn it great questions in this short video I'll break it down for you what spring boot is why it exists and most importantly why learning it can be a GameChanger for your [Music] career let's start with a spring framework because to really understand spring boot you need to know where it comes from Spring is one of the most popular Frameworks for building Java applications think of it like a toolbox it's got everything you need to build scalable Enterprise grade applications and it's modular which means you can pick and choose the modules you need these modules are broadly categorized into a few different layers at the core we have modules for handling dependency injection and managing objects I know it might sound confusing but trust me I've covered this in depth in my spring boot course it's not really that complicated in the web layer we have modules for building web applications with these modules we can handle HTTP requests process data and return responses whether it's HTML for a web page or Json for an API in the data layer we have modules for working with databases whether you're using SQL no SQL or even inmemory databases we also have a module for adding cross cutting features like logging or security without cluttering the main code this is called aop or aspect oriented programming we also have spring test for testing of spring components by the way the spring framework is just one part of a larger family of projects in the spring ecosystem these projects extend the capabilities of the framework to address specific needs for example we have spring data for simplifying database access Spring Security for adding authentication and authorization to your applications spring batch for batch processing spring Clow for building microservices and distributed systems spring integration for simplifying messaging and integration between systems and more so a spring is amazing but it comes with a catch it requires a lot of setup for example if you want to build a web application you might need to set up a web server configure routing and manage dependencies manually this can make development slower and more complex and that's exactly why spring boot was created spring boot is a layer on top of spring that removes all the painful setup think of it like this if spring is a toolbox spring boot is a preassembled workstation instead of spending hours setting things up you can just start coding right away it comes with sensible defaults Auto configuration and embedded servers so you can go from an idea to a working application in minutes that's why spring boot is one of the most widely used Java Frameworks in the industry major companies like Netflix Amazon and Google rely on it to build scalable applications and because of that spring boot developers get paid really well according to glass store Spring boot developers earn between $60,000 and $300,000 a year which is huge if you're a Java developer learning spring boot can open up better job opportunities and higher salaries now I know someone in the comment is already typing msh why are you talking about job opportunities haven't you heard AI is taking over coding is dead yeah sure but you know go ahead and let chat GPT build your next production system let's see how that goes so now that you know why spring boot is so valuable the next step is learning it properly I've just uploaded the first hour of my spring boot course for free on YouTube where I walk you through the fundamentals step by step I've put the link for you in the description box and by the way if you're new here make sure to subscribe because I post coding tutorials all the time that's it for this one thanks for watching and I'll see you in the next video",True
gJrjgg1KVL4,Spring Boot Tutorial for Beginners [2025],"Master Spring Boot and build amazing backends with Java! üöÄ This beginner-friendly tutorial covers everything you need to learn Spring Boot 3.

üöÄ Want to dive deeper?
- Get the full course: https://mosh.link/spring-boot-fundamentals
- Subscribe for more videos like this: https://goo.gl/6PYaGF

üí° Related tutorials 
https://youtu.be/EWd3_I4X32g?si=IbbN5SMYQrQJe-ek

üëâ Interested in trying IntelliJ IDEA Ultimate? https://jb.gg/intellij-idea-for-mosh
üëâ JetBrains has given me a 100% discount code! Use 'Spring_with_Mosh' to enjoy IntelliJ IDEA Ultimate for 3 months completely free! Redeem it here until April 1, 2026: https://jb.gg/redeem

üí° Related tutorials 
https://youtu.be/eIrMbAQSU34?si=Uw0R6GZ4DM0sanYR
https://youtu.be/7S_tz1z_5bA?si=RvQs6awyciFtDeel

‚úã Stay connected:
- Full Courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üìñ Table of Content
0:00:00 Welcome
0:01:12 Prerequisites
0:02:02 Course Structure
0:03:44 Source Code
0:05:01 Getting Started
0:05:48 Introduction to Spring Boot
0:08:30 Setting Up the Development Environment
0:11:55 Creating a Spring Boot Project
0:15:38 Understanding the Project Structure
0:19:37 Dependency Management
0:27:28 Building Your First Spring Controller
0:31:41 The Ultimate Spring Boot Course 
0:32:16 Running Spring Boot Applications
0:34:40 Debugging Spring Boot Applications
0:40:34 Automatic Restarts
0:44:12 Configuring Application Properties
0:46:49 Dependency Injection
0:47:48 What is Dependency Injection?
0:55:30 Constructor Injection
1:00:25 Setter Injection
1:03:05 The Spring IoC Container
1:05:58 Configuring Beans Using Annotations
1:10:59 What's Next 

#springboot #java #backend",2025-02-26T12:30:48Z,"spring boot tutorial, spring boot tutorial for begineers, spring boot, java spring tutorial, java spring boot, web development, java, spring boot full course, learn spring boot, spring boot course, code with mosh, spring boot for beginners, spring boot 3, spring boot 3.0, mosh hamedani, programming with mosh, programming, spring framework, java springboot, java backend, java web development, java spring, spring boot basics, spring boot crash course",27.0,en,en,https://i.ytimg.com/vi/gJrjgg1KVL4/default.jpg,PT1H11M22S,601738.0,10789.0,401.0,public,,False
lvg8pBJ2kFg,You asked for it. It‚Äôs finally happening!,"‚ù§Ô∏è Join this channel to get access to perks:
https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join

‚úã Stay connected:
- Full Courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/",2025-02-18T12:30:46Z,"spring boot tutorial, spring boot, spring boot course, spring boot tutorial for begineers, spring boot for beginners, spring boot 3, programming with mosh, code with mosh, mosh hamedani, programming, web development",27.0,en,en,https://i.ytimg.com/vi/lvg8pBJ2kFg/default.jpg,PT1M15S,34536.0,1174.0,148.0,public,"hi guys many of you have been asking me for a spring boot course and after a long wait it's finally here spring boot is the go-to framework for building modern Java applications and learning it is one of the best investments you can make in your career companies are actively hiring Springwood developers with salaries ranging from 160,000 to 300,000 per year according to glass store I know that for many developers spring boot can feel overwhelming that's why I've put together this clear structured non nonsense Cor to teach you spring boot the right way this is a two-part series and in the first part we focus on two of the most fundamental aspect of spring boot dependency injection and database integration with spring data jpa but we don't just cover the basics we go really deep touching on Concepts that most other courses either gloss over or don't cover at all this course is packed with real world exercises to help you truly understand and apply what you learn I've put my heart and soul into creating this course and I can't wait to share it with you the course is dropping soon so make sure you're subscribed and have notifications turned on so you'll be the first to know when it's live see you in the course",True
K5KVEU3aaeQ,Python Full Course for Beginners [2025],"Master Python from scratch üöÄ No fluff‚Äîjust clear, practical coding skills to kickstart your journey! 

‚ù§Ô∏è Join this channel to get access to perks:
https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join

üöÄ Want to dive deeper?
- Check out my Python mastery course: https://mosh.link/python-course
- Subscribe for more awesome Python content: https://goo.gl/6PYaGF

üîó Related videos 
https://youtu.be/yVl_G-F7m8c?si=aoIiT6CyaRRfBsRM

‚úã Stay connected:
- Full Courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üìñ Table of Content
0:00:00 Introduction
0:00:56 What is Python?
0:04:11 Installing Python
0:05:36 Python Interpreter
0:07:30 Code Editors
0:08:49 Your First Python Program
0:12:25 Python Extension
0:14:26 Linting Python Code
0:18:40 Formatting Python Code
0:22:51 Running Python Code
0:24:30 Python Implementations
0:26:59 How Python Code is Executed
0:29:45 Quiz
0:31:17 Python Mastery Course
0:31:44 Variables
0:34:48 Variable Names
0:37:51 Strings
0:43:20 Escape Sequences
0:46:01 Formatted Strings
0:48:09 String Methods
0:54:03 Numbers
0:56:50 Working With Numbers
0:58:59 Type Conversion
1:04:03 Quiz
1:06:43 Comparison Operators
1:08:46 Conditional Statements
1:12:56 Ternary Operator
1:15:04 Logical Operators
1:19:07 Short-circuit Evaluations
1:21:13 Chaining Comparison Operators
1:22:35 Quiz
1:24:18 For Loops
1:27:56 For..Else
1:30:42 Nested Loops
1:33:26 Iterables
1:36:34 While Loops
1:41:33 Infinite Loops
1:43:10 Exercise
1:45:13 Defining Functions
1:47:37 Arguments
1:49:57 Types of Functions
1:53:59 Keyword Arguments
1:55:59 Default Arguments
1:57:34 xargs

#Python #AI #MachineLearning #WebDevelopment",2025-02-12T12:30:31Z,"python full course, python full course for begginers, python beginners course, python complete course, python full tutorial, python tutorial, python programming tutorial, python tutorial for beginners, learn python, python basics, programming tutorial, python crash course, complete python course, python, python course, python programming, python for everybody, programming with mosh, mosh hamedani, code with mosh",27.0,en,en,https://i.ytimg.com/vi/K5KVEU3aaeQ/default.jpg,PT2H2M21S,3699827.0,91697.0,2435.0,public,,False
NClmyC6olC0,Top Programming Languages to Learn in 2025,"Want to future-proof your coding skills? Discover the top programming languages that will dominate in 2025, with real-world use cases and career insights. Don‚Äôt miss out‚Äîstay ahead in tech!

‚ù§Ô∏è Join this channel to get access to perks:
https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join

üîó Tutorials 
https://youtu.be/_uQrJ0TkZlc?si=PlSZ9OJl2sku4sIH
https://youtu.be/kqtD5dpn9C8?si=tr53YlfyrMqsi_RF
https://youtu.be/eIrMbAQSU34?si=n1fSY_7d96rzzomX
https://youtu.be/W6NZfCO5SIk?si=uaOUNhKhr2dOySV2
https://youtu.be/d56mG7DezGs?si=Kpc4FFmYOWKvpPIc
https://youtu.be/7S_tz1z_5bA?si=83GhWNiU_J9MB2e2
https://youtu.be/ZzaPdXTrSb8?si=Ve9Y4HTogsj_pJLM

‚úã Stay connected:
- Full Courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

#coding #programming",2025-01-22T12:30:18Z,"top programming languages, top coding languages in demand, top programming languages 2025, best coding language to learn, popular languages, coding, most popular programming language, top coding languages, coding languages",27.0,en,en,https://i.ytimg.com/vi/NClmyC6olC0/default.jpg,PT4M14S,261516.0,7193.0,515.0,public,in this video we're diving into the top programming languages to learn in 2025 and why they're worth your time let's Jump Right [Music] In first I want to give a quick shout out to our newest members Joe Abdul Rahim rishab Aisha Ernie Chris lizelle Yasmin Marcus and George thank you so much for joining this Channel and supporting me you're awesome by the way if you're new here welcome this channel is all about helping you build a strong foundation in coding and land your dream Tech job I create practical no fluff tutorials road maps and career advice to help you succeed if that sounds good H subscribe and check out the other videos on this channel all right let's talk about the top programming languages for 2025 first up is python it's still the king of programming languages why because it's super versatile beginner friendly and Powers some of the coolest take out there like data science machine learning web development and Automation in 2025 AI is only getting bigger and python is the go-to language for AI and machine learning process projects but here's the thing learning python isn't just about Landing your first job it's about staying relevant throughout your entire career whether you're a total beginner or a Season Pro python is one of those languages you'll keep coming back to now if you want to Learn Python I have a couple of tutorials on this channel I put the links down below I also have comprehensive courses on my website if you prefer structured learning again links are down below next up we've got Java now I know what you're thinking Java has been around forever right but it's far from outdated in fact it's still the backbone of of so many Industries banking systems Healthcare platforms e-commerce sites and so on now some people might argue that cotlin is better and yeah cotlin is awesome but Java's ecosystem tools and Community are hard to beat plus tons of companies still rely on Java for its stability and scalability and if you're into Android development Java is a solid Choice Bottom Line If you're looking for job security and opportunities at big companies you can't go wrong with Java if you want to learn Java again I have a bunch of tutorials on this channel now let's talk about JavaScript whether you love it or hate it it's everywhere seriously over 98% of websites use JavaScript it's used in front end development backend development and even mobile development now you might say msh with tools like chat GPT why even bother learning JavaScript here's the deal AI tools can definitely generate code but you still need to understand what's going on think about it would you let chat GPT write a legal contract for selling your house and just sign it without reviewing with a lawyer probably not it's the same with code you've got to review it refine it and tweak it to make sure it works for your project now if you want to take JavaScript to the next level typescript is the perfect upgrade it adds static typing which helps catch bugs early improves maintainability and makes working on bigger projects way easier I believe in 2025 more companies are going to use typescript to boost productivity and reduce bugs and here's the good news if you already know JavaScript learning typescript is a piece of cake you can probably learn it in about a month again I have a tutorial on this channel if you're interested all right let's talk about SQL it might not be FL flashy but it's one of those skills every take professional needs whether you're working with data or building software SQL is your go-to for managing databases and let's be real AI is exploding and that means the demand for data is off the charts AI runs on data and SQL is how you work with that data even if you specialize in another language knowing SQL will give you a serious Edge it's one of those must have skills in your toolkit last but definitely not least C++ yeah it's a bit tougher to learn especially if you're just starting out but there is a reason and it's still so popular C++ is all about speed and control it Powers everything from game engines to highfrequency trading systems it's huge in Industries like Automotive Robotics and real-time simulations so if you're into cutting Ed Tech C++ is worth your time and there you have it the top programming languages to learn in 2025 whether you're starting your coding Journey or leveling up your skills these languages open doors to amazing opportunities python Java JavaScript typescript cql and C++ each have unique strengths so pick the one that fits your goals now what do you think did your favorite language make the list let me know in the comments below if you found this video helpful give it a like And subscribe for more helpful videos thanks for watching,True
v7BNtpw53AA,The Complete Cybersecurity Roadmap: Land a Cybersecurity Job in 10 Months,"The complete step-by-step roadmap to land your first cybersecurity job in 10 months or less.

‚ù§Ô∏è Join this channel to get access to perks:
https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join

‚úã Stay connected:
- Full Courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üìö Tutorials 

https://youtu.be/_uQrJ0TkZlc?si=CgNwkAU760a5nRA6
https://youtu.be/kqtD5dpn9C8?si=09gTE-7ltWEZSuqQ

#cybersecurity #coding #techjobs",2025-01-14T12:31:01Z,"cybersecurity roadmap, cyber security roadmap, how to get a cyber job, cybersecurity, cybersecurity jobs, penetration testing, cyber security, cyber security career, coding, programming, programming with mosh, code with mosh, mosh hamedani, entry level cybersecurity jobs, soc analyst, pentesting",27.0,en,en,https://i.ytimg.com/vi/v7BNtpw53AA/default.jpg,PT5M54S,453496.0,16592.0,468.0,public,let's talk about the essential skills you need to land your first cyber security job we'll look at the main areas you should study which certificates can help and how long each step might take if you can put in 3 to 5 hours of study or practice each day you can be ready for an entry level role in about 7 to 10 months let's Jump Right [Music] In first I want to give a quick shout out to our newest members Edgars Christian loveg shales Joe thank you so much for joining this Channel and supporting me you're awesome by the way if you're new here welcome this channel is all about helping you build a strong foundation in coding and land your dream Tech job I create practical no fluff tutorials road maps and career advice to help you succeed if that sounds good hit subscribe and check out the other videos on this channel the first step is building a strong foundation in it this is a step that unfortunately a lot of people skip but it's absolutely important especially if you're new to Tech or transitioning from another job if someone asks you to fix their computer computer or troubleshoot their Wi-Fi and you have no clue this is your starting point otherwise you can skip to the next step now a great place to start is CompTIA A+ it's a well-known certification that covers foundational it knowledge like installing operating systems handling common PC issues managing Essential Software and so on I'll put the link down below if you're interested if you spend 3 to 5 hours of studying every day this step should take you about a month or two by the way I'm not affiliated with CompTIA or any other companies I'm going to mention in this video I'm recommending them simply because they're wellknown and give you a solid foundation in cyber security Now assuming that you have a solid foundation in it the next step is computer networking if you really want to protect or attack systems you have to understand how data moves around so spent about a month or two learning OSI and tcpip models common protocols like HTTP https TCP and so on IP addressing and subnetting as well as basics of routers switches and firewalls if you want a structure way to learn and proove your networking skills CompTIA Network plus is a great entry level certification it covers General networking principles without focusing on one brand of devices another option is CCNA which goes deeper into Cisco's OWN Network and Equipment it's the gold standard for networking having it on your resume definitely helps you stand out but it's more difficult than Network plus by the way remember that certificates are only part of the story employers want to see real Hands-On skills not just a piece of paper so don't assume that simply getting all these certificates is going to guarantee a job immediately make sure to build those essential skills and you certificates to give your resume an extra boost now let's talk about operating systems particularly windows and Linux if you're just starting out pick one to focus on let's say windows if that's what you already use daily and get comfortable with file permissions logs and basic user management but in the long term you really should learn both because Linux is extremely common in servers Cloud environments and security tooling spend one to two months here now if you want a formal path for Linux you can go for compt Linux plus but honestly you can skip getting this certification because it's not going to help you as much as other certifications like Network Plus or CCNA if you want to get it do it for the knowledge next up is coding now you don't need to be an expert but having some knowledge of coding is going to help you a lot throughout your entire It Journey the best language for you to learn is python because it's very beginner friendly and it's super common in cyber security I have a couple of Pon tutorials on this channel one is only 1 hour long the other is more comprehensive they're super easy to follow and millions of people have already watched them to Learn Python again links are down below I would also recommend to learn bash for Linux or Powershell for Windows because these languages are also super common for automating tasks like file management user creation or system checks they're very simple and once you learn a programming language like python learning a second language will be far easier now you're ready to learn cyber security fundamentals you have a a couple of certificate options here compa Security Plus is very popular and is often a requir checkbox for many roles especially government jobs another option is Google cyber security professional certificate it's newer so some hiring managers may be less familiar with it but it's a solid path if you prefer a guided online approach now with all the foundations you have built so far next you can learn defensive security which is about defending against attacks in cyber security it's often called Blue teaming you should learn how to detect threat analyze logs and keep Network secure you have a few certificate options here the first one is Cisco cyber Ops associate it's a well-respected certificate the other option is psaa by TCM security it's a smaller brand than Cisco but it's very Hands-On the other option is ptl1 by security team blue it's laser focused on real world defensive tasks the next step is offensive security which is about testing systems or weaknesses in cyber security it's often called red teaming spend about a month or two practice scanning networks exploit vulnerabilities and simulate real world hacks you can practice with platforms like try hack me or hack the Box they provide safe labs for you to build real world hacking skills now for certifications you have a few options we have ejpt it's a Hands-On entrylevel red team certification the other option is PJP from TTM security it's another beginner level penetration testing certificate another popular option is CompTIA pentest plus so that's pretty much it if you follow follow this road map and putting 3 to 5 hours every day you can be ready for an entry-level security job in about 7 to 10 months of course everyone learns at their own pace so don't stress if you need a bit more time now if you have any questions please let me know in the comments below and I will do my best to answer you right here or in my future videos If you enjoyed this video please give it a like And subscribe for more useful content,True
gdiao7L9GjE,From Zero to Blockchain Developer in 10 Months: Complete Roadmap,"Go from zero to a blockchain developer in 10 months. This step-by-step roadmap covers the essential skills and latest technologies to become a blockchain developer. 

‚ù§Ô∏è Join this channel to get access to perks:
https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join

Download the FREE roadmap PDF: https://mosh.link/blockchain-roadmap

‚úã Stay connected:

- Full Courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üìö Tutorials 

https://youtu.be/_uQrJ0TkZlc?si=CgNwkAU760a5nRA6
https://youtu.be/kqtD5dpn9C8?si=09gTE-7ltWEZSuqQ
https://youtu.be/W6NZfCO5SIk?si=yS0lQXyy3qwQF3DA
https://youtu.be/8JJ101D3knE?si=OGTuS35LQqSunuhh
https://youtu.be/BBpAmxU_NQo?si=dm-ZCPxVBYWS1Qhn
https://youtu.be/SqcY0GlETPk?si=4byQs5W3qyG-011L

#blockchain #coding #techjobs",2025-01-07T12:30:49Z,"blockchain developer, roadmap for blockchain developer, become a blockchain developer, tech jobs, how to become a blockchain developer, become blockchain developer, ethereum developer, solidity, blockchain developer roadmap, blockchain developer career, blockchain, blockchain development, code with mosh, programming with mosh, mosh hamedani",27.0,en,en,https://i.ytimg.com/vi/gdiao7L9GjE/default.jpg,PT4M59S,202134.0,6509.0,331.0,public,if you want to become a blockchain developer you're in the right place today I'm sharing a complete blockchain road map I'll walk you through the essential skills you need the tools I personally recommend and how much time you should spend on each assuming you dedicate 3 to 5 hours of studying every day this road map should take you about 8 to 10 months to complete let's Jump Right [Music] In first I want to give a quick shout out to our newest members Edgars Christian Bluff gien shales Joe thank you so much for joining this Channel and supporting me you're awesome by the way if you're new here welcome this channel is all about helping you build a strong foundation in coding and land your dream Tech job I create practical no fluff tutorials road maps and career advice to help you succeed if that sounds good hit subscribe and check out the other videos on this channel the first step to learning blockchain development is to pick up a programming language the two most popular languages for blockchain development are Python and JavaScript python is the easiest to learn and is widely used in blockchain scripting JavaScript is common for frontend development and web 3 Frameworks which we'll talk about later in this video if you're starting out stick to one language preferably python so you don't get confused after learning python picking up JavaScript will be much faster if you study and code 3 to 5 hours a day you can learn the basics of either language in about 2 months now to help you on this journey I've created a free supplementary PDF that breaks down the specific Concepts you need to learn for each skill it's a great resource to review your progress find gaps in your knowledge and prepare for interviews you can find the link in the description Box by the way I have a bunch of tutorials on this channel and complete courses on my website if you're looking for structured learning again links are in the description box the next thing you need to learn is a version control system like git git is not a programming language it's a tool we use to track changes to our code and collaborate with others git and GitHub which is a platform that hosts git repositories are essential for every developer git has a ton of features but you don't need to know them all for everyday use think of it like the 8020 rule 80% of the time you use 20% of gits features 1 to 2 weeks of practice is enough to get up and running again I have a bunch of tutorials on this channel and complete courses on my website if you prefer structured learning the next step is studying data structures and algorithms this is one of the topics taught to computer science students that a lot of self-taught developers Skip and is often asked in job interviews it's particularly important for blockchain development because in blockchain development every operation can have a cost so you have to learn how to process and store data efficiently and this is where data structures come into the play you have to use the right data structure for the right problem so make sure to study the classic data structures like arrays link lists Stacks cues and so on spend about a month or two on this and you'll be in great shape once you have a good grasp of blockchain fundamentals you're ready to learn about smart contracts these are programs that run on a blockchain like little robots that follow specific rules and can't be changed once their life now solidity is the most popular language for writing smart contracts on ethereum don't let the name scare you it's similar to other coding languages once you get the hang of it you can practice using remix IDE which is a web-based development environment for ethereum smart contracts it's great for beginners because you can start coding and testing your smart contracts immediately without extensive local setup once you get comfortable writing simple contracts with remix IDE then I would recommend learning hard hat for more professional and Enterprise level workflows it's a popular local development environment for ethereum smart contracts it gives you a framework and a set of tools to build test deploy and debug smart contracts more effectively spend about a month or two building small projects like a basic token or nft now once you build and deploy a smart contract to a blockchain network then you need to allow users to interact with it and this is where dap or decentralized application development comes into play a Dap is basically an application that looks and feels like a regular web or mobile app but instead of having a single company server at the back end it uses a blockchain network for its core operations now to build a dab you have to learn a front and framework for building user interfaces we have a few tools here like react angular and view but react is the most popular tool for building user interfaces now to learn react you need to learn JavaScript and ideally typescript which is a super cell of JavaScript that is widely used in react projects these days you can learn the essence of JavaScript and typescript in about 2 months and then you need another month or two to learn react also you should get familiar with web3 libraries like web3js or ether's JS for connecting your frontend application to the blockchain so if you dedicate a few hours every day and follow this road map you'll have the necessary knowledge to apply for an entry-level blockchain developer job in about 8 to 10 months if you have any questions please let me know in the comments and I'll do my best to answer you right here or in my future videos if you enjoy this video please give it a like And subscribe for more useful content,True
zVEH7Zt1j9A,Top Tech Jobs for 2025: High Demand & High Pay,"‚ù§Ô∏è Join this channel to get access to perks:
https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join

‚úã Stay connected:
- Full Courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/",2024-12-27T12:30:58Z,"tech jobs, tech job market, software engineering, tech careers, career advice, job market, tech, coding jobs, software engineering jobs, tech career, code with mosh, programming with mosh, mosh hamedani, coding, highest paying jobs",27.0,en,en,https://i.ytimg.com/vi/zVEH7Zt1j9A/default.jpg,PT2M2S,32500.0,1294.0,50.0,public,"2025 is just around the corner and if you're wondering which Tech creators are going to dominate the scene you're in the right place now before we dive in let me give you one key piece of advice don't try to learn everything you can't be a data scientist a mobile developer and a devops engineer all at the same time it just doesn't work pick one path focus and learn the skills that career demands I've created detailed road maps for many of the careers we're about to discuss you'll find the links in the description below let's kick things off with AI and machine learning these are the rock stars of tech right now transforming Industries like healthcare finance and transportation take self-driving cars for example AI Engineers are the ones building the models that make these cars smarter every day the salary for a machine learning engineer is about $120,000 to $180,000 a year depending on your skills and location oh and if you're serious about this pass I've got a detailed road map for AI and machine learning Engineers check it out below the next career on our list is data scientist data science scientists are the detectives of the tech World they take raw data and turn it into actionable insights think about Netflix recommending your next favorite show or Spotify cating playlist just for you that's data science in action it's not just about crunching numbers it's about understanding the story the data is telling the salary for a data scientist is around $100,000 to $150,000 and of course that depends on your skill and location and yes I've got a road map for data scientists as well link is in the description the next career on our list is cyber security specialist cyber security is like being a digital bodyguard with cyber attacks increasing every year this role is absolutely critical a friend of mine works in cyber security for a bank and he once told me they get hit by thousands of attack attempts every single day companies can't afford to take risks so they're paying top dollar for experts in this field the salary for a cyber security specialist is around 90,000 to1 150,000 and even higher if you specialize in areas like ethical hacking",True
fZmQ_aPXJAM,The Best Tech Jobs for 2025: High Demand & High Pay,"Curious about the best tech careers for 2025? Find out which roles are in demand, what they pay, and why they matter in today‚Äôs fast-changing world of tech.

‚ù§Ô∏è Join this channel to get access to perks:
https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join

üöÄ Roadmaps: https://youtube.com/playlist?list=PLTjRvDozrdlx82aIrsHY_Ndr3mKGK4tgq&si=JjJvrStpQ75JFAeZ

‚úã Stay connected:
- Full Courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

#coding #tech #techcareers",2024-12-24T13:30:06Z,"tech jobs, tech job market, software engineering, tech careers, career advice, job market, tech, coding jobs, software engineering jobs, tech career, code with mosh, programming with mosh, mosh hamedani, coding, highest paying jobs",27.0,en,en,https://i.ytimg.com/vi/fZmQ_aPXJAM/default.jpg,PT5M16S,526802.0,12076.0,636.0,public,"2025 is just around the corner and if you're wondering which Tech careers are going to dominate the scene you're in the right place whether you're switching careers or just starting out this video is going to give you all the info you need let's dive [Music] in now if you're one of those people who think takech jobs are dead because robots are taking over this video is not for you so have a great day but if you're serious about starting or advancing your Tech Career in 2025 stick around I've been in the industry for over 20 years and I've seen the trends come and go this video is based on what I've learned firsthand and what's happening in the real world right now according to the US Bureau of Labor Statistics or BLS employment in computer and information technology occupations is projected to grow much faster than the average for all occupations from 2023 to 2033 about 356,000 openings are projected each year in these occupations due to the employment growth and the need to replace workers who leave the occupations permanently by the way if you're new here welcome this channel is all about helping you build a strong foundation in coding and land your dream Tech job I create practical no fluff tutorials road maps and career advice to help you succeed if that sounds good hit subscribe and check out the other videos on this channel now before we dive in let me give you one key piece of advice don't try to learn everything you can't be a data scientist a mobile developer and a devops engineer all at the same time it just doesn't work pick one path focus and learn the skills that career demands I've created detailed road maps for many of the careers we're about to discuss you'll find the links in the description below let's kick things off with AI and machine learning these are the rock stars of tech right now transforming Industries like healthcare finance and transportation take self-driving cars for example AI Engineers are the ones building the models that make these cars smarter every day the salary for a machine learning engineer is about $120,000 to $180,000 a year depending on your skills and location oh and if you're serious about this P I've got a detailed road map for AI and machine learning Engineers check it out below the next career on our list is data scientists data scientists are the detectives of the tech World they take raw data and turn it into actionable insights think about Netflix recommending your next favorite show or Spotify curating playlist just for you that's data science in action it's not just about crunching numbers it's about understanding the story the data is telling the salary for a data scientist is around $1,000 to $150,000 and of course that depends on your scale and location and yes I've got a road map for data scientists as well link is in the description the next career on our list is cyber security specialist cyber security is like being a digital bodyguard with cyber attacks increasing every year this role is absolutely critical a friend of mine works in cyber security for a bank and he once told me they get hit by thousands of attack attempts every single day companies can't afford to take risks so they're paying top dollar for experts in this field the salary for a cyber security specialist is around 990,000 to 150,000 and even higher if you specialize in areas like ethical hacking the next career on our list is cloud engineer Cloud Engineers are the backbone of modern technology they're the ones making sure your favorite apps don't crash when millions of people use them at the same time for example did you know that Netflix relies on Amazon web services or AWS to stream all his content without cloud Engineers optimizing and maintaining that infrastructure your it chose wouldn't load as smoothly the salary for cloud engineering is around $110,000 to $160,000 the next career on our list is devops engineer devops is all about building and maintaining the pipelines that get your code from development to production it's one of the most in demand skills today here's a real example every time Amazon updates its website devops engineers make sure the changes are rolled out smoothly without breaking the side or slowing it down the salary for a devops engineer is around1 ,000 to $140,000 and yes there is a road map for this one too check the description the next career on our list is full stack developer fullstack developers build both the front end and back end of applications making them super versatile and valuable I think going forward in 2025 companies value fullsack developers more than people who can only build the front end or back end the salary for a fullsack developer ranges from 880,000 to 130,000 and by the way I've got a road map for fullsack developers as well links below the next career on our list is blockchain developer Now blockchain isn't just about cryptocurrency anymore companies like Walmart are using blockchain to track their supply chains and it's being used in Industries like healthcare and real estate too if you can build smart contracts or understand decentralized systems you'll be in high demand the salary for a blockchain developer is around 120,000 to 180,000 and even higher for Specialists so these are the careers that I believe are going to be in high demand in 2025 if you're serious about starting check out the detailed road maps I've created for you they will show you exactly what you need to learn links are in the description now let me know in the comments which career excites you the most and don't forget to like subscribe and check out my other videos thanks for watching",True
AD43TVI2S0A,Mosh's Christmas Gift to You!,üéâ Sign up today to redeem this offer: https://codewithmosh.com/p/all-access,2024-12-13T16:30:04Z,"mosh hamedani, programming with mosh, code with mosh, codewithmosh, programmingwithmosh",27.0,en,en,https://i.ytimg.com/vi/AD43TVI2S0A/default.jpg,PT1M24S,24388.0,819.0,112.0,public,okay guys it's the last class of the year so today is your chance to ask me anything anything like really anything go for it how much money do you make why you want to be my accountant or what M M M Habibi what is your uh Gmail password none of your business all in lower case one word MH is it true that you speak Mandarin I how long will it take me to learn to build an app that will change the world how will we start to learn to code first and then we talk about changing the world okay yeah but how long I want to know something weird about you I can't touch PES why M do you have any deals this holiday season funny ask yeah actually this holiday season we are doing 10% off on the annual sub about 80% no guys best I can do is 20 God it's nothing man 100 better Baba okay better better 50% all right bum Habibi come to M's class he's having a deal this holiday season get 50% off an annual subscription to all my courses that's over 50 courses plus all the courses coming out next year this offer ends December 31st start now and make 20125 the year you achieve your coding dreams happy holidays [Music],True
AQdMaSaHWdM,Don't Miss Mosh's Black Friday Sale!,üéâ Black Friday Special: https://mosh.link/bf2024,2024-11-25T13:00:11Z,"black friday sale, black friday tech deals, code with mosh, programming with mosh, mosh hamedani, programming, coding, black friday, black friday deals, black friday 2024, self taught programmer, how to code, coding advice, learn to code, coding mistakes",27.0,en,en,https://i.ytimg.com/vi/AQdMaSaHWdM/default.jpg,PT2M14S,15607.0,589.0,47.0,public,all right guys let's talk about why you are here you all suffer from YouTube tutorial syndrome we're here to heal who wants to go first I could start hi I'm Amy I want to be a frontend developer and I spent so much time learning react angular view but then just yesterday a new JavaScript framework came out that everyone says I have to learn what is it SC I hear you why are you here hi I'm Raj I've been trying to learn to code but I don't know where to begin I have around 50 playlists on YouTube for python HTML objectoriented programming data structures and my parents keep asking me every day Raj when will you finally become a software engineer no Habibi don't bother coding's dead Kal where did you hear that I heard it from some YouTubers you brother brother Alex what are you doing here I was training on python but I took your advice to learn JavaScript now I've started all these long dry 8 Hour courses but I haven't finished a single one I've got a real problem here msh I need your help you do have a problem I do indeed all right guys you all suffer from information overload and lack of structure and this is where Cote with Mar comes in the great news is we're currently offering a 50% discount on the annual subscription that's over 50 courses plus all the courses coming out next year how good is that 50% off Z de heck yeah all right buy a lot of snake food for that if you are a loved one want to recover from YouTube tutorial syndrome enroll in an all EXA subscription to code with MH that's over 50 courses plus all the courses coming out next year this offer is valid until November 30th click the link below to enroll what's it you want to learn the code oh you cute you don't got fingers,True
YNtWJNPCPPs,Don't Miss Mosh's Black Friday Sale!,"üéâ Black Friday Special [Offer ends November 30th]: https://mosh.link/bf2024

Don‚Äôt let Tutorial Syndrome hold you back. Take control of your coding journey today!",2024-11-23T14:00:25Z,"black friday sale, black friday tech deals, code with mosh, programming with mosh, mosh hamedani, programming, coding, black friday, black friday deals, black friday 2024, self taught programmer, how to code, coding advice, learn to code, coding mistakes",27.0,en,en,https://i.ytimg.com/vi/YNtWJNPCPPs/default.jpg,PT2M14S,101993.0,1126.0,150.0,public,all right guys let's talk about why you are here you all suffer from YouTube tutorial syndrome we're here to heal who wants to go first I could start hi I'm Amy I want to be a frontend developer and I spent so much time learning react angular view but then just yesterday a new JavaScript framework came out that everyone says I have to learn what is it te SC I hear you why are you here hi I'm Raj I've been trying to learn to code but I don't know where to begin I have around 50 playlists on YouTube for python HTML objectoriented programming data structures my parents keep asking me every day Raj when will you finally become a software engineer no Habibi don't bother coding's dead kalas where did you hear that I heard it from some YouTubers you brother brother Alex what are you doing here I was training on python but I took your advice to learn JavaScript now I started all these long dry 80 hour courses but I haven't finished a single one I've got a real problem here msh I need your help you do have a problem I do indeed all right guys you all suffer from information overload and lack of structure and this is where cot with Mar comes in the great news is we're currently offering a 50% discount on the annual subscription that's over 50 courses plus all the courses coming out next year how good is that 50% off a de heck yeah all right can buy a lot of snake food for that if you are a loved one want to recover from YouTube tutorial syndrome enroll in an all access subscription to code with MH that's over 50 courses plus all the courses coming out next year this offer is valid until November 30th click the link below to enroll what's it you want to learn the code oh you cute you don't got fingers,True
BGZB9dn0GV4,3 Problems with AI-Generated Code,"AI was supposed to change coding forever, but it's creating new problems no one saw coming. Let‚Äôs break down what this means for developers and why the AI hype bubble might be popping.

Get 2 month's of YouTube Premium Free: youtube.com/premium?cc=programmingwithmosh&utm_campaign=ytpcreator

Monthly paid subscription. Price per month varies. First 2 months free. Terms apply. Cancel anytime. If you subscribe through the link in this post or the banner appearing in this video, I may get a commission.

üîó Related Videos: 

https://youtu.be/4gX44uyGSHo?si=oMV6zLiFlGLEnt-Z
https://youtu.be/HXH4yu227EQ?si=4-f1ba7v6PRCQ6lz
https://youtu.be/XKkoVpupYdw?si=IeiBMEjtPT3k7lii

‚úã Stay connected:


- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

#ai #coding #programming",2024-11-15T13:00:19Z,"learn to code, web development, artificial intelligence, code beginner, software engineering, self taught programmer, web dev, career in tech, software developer job, coding, programming, code with mosh, programming with mosh, mosh hamedani, ai, openai, chatgpt, github copilot, claude, software development, cursor ai, coding with ai, cursor, copilot, generative ai",27.0,en,en,https://i.ytimg.com/vi/BGZB9dn0GV4/default.jpg,PT8M40S,90159.0,3765.0,398.0,public,a while back some big Tech leaders made some bold claims about AI Jensen hang the CEO of Nvidia actually said that kids wouldn't even need to learn to code anymore because according to him everyone in the world is now a programmer it is our job to create Computing technology such that nobody has to program everybody in the world is now a programmer this is the miracle this is the miracle of artificial intelligence yeah he said everyone in the world is now a program and then there is emad mushak CEO of stability AI who said that in just 5 years there wouldn't be any human programmers left sounds wild right but here's the reality AI isn't exactly living up to that hype instead of taking over programming it's causing a whole new set of issues studies are showing that AI generated code is often buggy insecure and honestly not very reliable in this video we're going to dive into to why this AI hype bubble might be popping we'll check out some numbers talk about why certain AI companies might be overvalued and see why some investors are starting to lose that initial excitement if you actually had to talk about the thing he selling today you go well it's a calculator of sorts well it doesn't always work but when it does it's sort of good so what happened how did we go from AI is going to replace programmers to AI is making things more complicated let's look at the research let's start with a recent study by up level that looks at the reality of AI in coding they studied over 800 developers using AI coding tools like GitHub co-pilot and the results not exactly what you would expect first they found that developers using AI saw a 41% increase in bugs yeah while AI might help you write code faster it's also adding a lot more errors meaning more time spent fixing those errors so in instead of spitting things up AI can actually slow you down in the end and even though you would think that AI tools would help developers complete tasks faster the study didn't show any real improvements in task completion or issue resolution basically ai's Promises of efficiency don't quite hold up also developers using these tools didn't feel any less stressed or burned out their workload and stress levels stayed pretty much the same even though AI was supposed to take over some of those rep competitive tasks so yeah it sounds great in theory but in practice not so much next up let's talk about a study from get clear they analyzed millions of lines of code to see how AI tools actually affect developer productivity if you thought AI was making things more efficient think again one big takeaway was that AI generated code has a 39% higher churn rate meaning a lot of it gets Rewritten or removed shortly after it's created so nearly 40% of that AI generated code ends up being redone which is basically waste of time and that's not all this study found about 11% more duplicated code when developers used AI tools instead of generating efficient reusable code AI tends to spit out new code unnecessarily which just clutters your code base now duplicated code isn't just ugly it can also introduce bugs in multiple places and make your software harder to debug and scale so yeah AI might help you pump out code faster but it also creates a ton of instability more churn more duplicated code it all adds up to less Reliable Software and more effort spent maintaining a clean code base in the end it's more work not less not exactly the game changer we were promised right oh it it thinks that BofA is a real protocol and it's like I don't know how to do that hey I wanted to tell you about something that's been improving my YouTube experience a ton and that's YouTube premium have you ever been watching a video and at the best part and ad pops up well YouTube premium gets rid of that you can watch all your favorite content without a single ad I've been using YouTube premium for the past few years and it's the best experience especially when I'm in bed I love listening to podcasts and I hate those annoying ads popping up but thanks to YouTube premium I never get them but there's more with YouTube premium you can also download your favorite videos this is great if you're traveling or don't have access to high-speed internet you can download videos ahead of time and watch them offline another great benefit is that you can keep your videos playing in the background when you switch to other apps ever been watching a video and then you get a text from a friend when you switch to the other app the video usually stops right with YouTube premium your videos keep playing in the background while you switch to other apps so how do you get all these perks YouTube premium is a paid monthly subscription service you can pay a very low monthly fee and get all these benefits no commitments you can cancel anytime but here's the best part if you subscribe through the link in the description or the banner in this video you will get two months free and I may earn a commission you will not only get an amazing atree experience but you will also support my channel so if you want 2 months of YouTube premium for free subscribe using the link in the description now let's talk about security because when you're writing code it's not just about getting it done it's about getting it right and this is where AI coding assistants start to fall short a study from Stanford found that the developers using an AI assistant wrote significantly less secure code than those working without one what's worse is that developers who had access to an AI assistant were actually more likely to believe their code was Secure even when it wasn't this suggests that AI tools might be giving developers a false sense of confidence AI generated code often looks right which makes developers trust it too easily and this false sense of security is a big deal in fields like healthcare Finance or infrastructure places where security really can't be compromised now don't get me wrong I'm not saying AI is useless or we should stop using it as a developer I can tell you that AI has definitely boosted my productivity I use it all the time for repetitive tasks it's great for generating boilerplate code like the stuff that nobody wants to write from scratch it's great for translating code from one language to another or quickly throwing together a prototype so yes AI is a powerful tool but it's just that a to the future of coding is an AI replacing developers it's developers working with AI anyone telling you otherwise probably has never built real enterprise software in their life or they're trying to sell you something look coding isn't even the hardest part of being a software engineer we spend a ton of time in meetings Gathering requirements setting up environments and digging through old code bases to understand what's really going on coding is only one piece of the puzzle so think of AI like spell checker for writers it makes us more productive but it's not replacing us anytime soon if ever and this brings us to a big takeaway education AI might help with some coding but you still need to understand what's going on behind the scenes you can just trust it blindly companies have learned this the hard way AI can give you code that looks great at first but if you don't fully understand it you're opening the door to bugs instability and security risks on top of that just copy pasting AI generated code can lead to technical death code that's so messy and complex that no one can work with without breaking something that's why in my courses I focus on teaching you to write clean maintainable code that solves real problems I don't just show you what to write I explain why we are doing it this way knowing the reasoning behind your code is key to becoming a great developer someone who can create software that is functional scalable and sustainable in the long run so AI is awesome and it can definitely spit things up but don't use it blindly don't skip learning the fundamentals best practices or the reasoning behind your code just because AI can generate it for you because here's the truth if you don't understand what your code is doing you're not making yourself more valuable you're actually putting yourself at risk of being left behind you won't lose your job to AI you will lose it to the developer who has solid programming skills and knows how to use AI to be even better AI is here to help not to replace us so invest in yourself learn the fundamentals understand the details and then use AI to level up if you found this video helpful please like And subscribe for more coding advice,True
yVl_G-F7m8c,Python Projects for Beginners ‚Äì Master Problem-Solving! üöÄ,"Improve your Python programming skills with these handpicked Python projects. 

üöÄ Want to dive deeper?
- Get 13 more Python projects (beginner to intermediate): https://mosh.link/python-projects
- Subscribe for more videos like this: https://goo.gl/6PYaGF

‚úã Stay Connected

- Complete courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üìö Course Materials

- Project handbook: https://mosh.link/python-projects-for-beginners-handbook
- Source code: https://github.com/mosh-hamedani/python-projects-for-beginners

üîó Resources

- Python for Beginners Tutorial: https://youtu.be/_uQrJ0TkZlc?si=-5__g_UzLEp84VSh
- Complete Python Mastery Course: https://codewithmosh.com/p/python-programming-course-beginners

üìñ Course Content 

00:00 ‚Äì Welcome
00:54 ‚Äì Prerequisites
01:49 ‚Äì Course Materials
02:34 ‚Äì How to Take This Course
04:14 ‚Äì Dice Rolling Game
10:31 ‚Äì Number Guessing Game
18:14 ‚Äì Rock, Paper, Scissors Game
33:35 ‚Äì Refactoring: Modularizing Code
40:14 ‚Äì Refactoring: Applying the DRY Principle
45:28 ‚Äì QR Code Generator

#python #pythonforbeginners #pythonprojects #pythontutorial",2024-09-10T13:01:00Z,"python projects for beginners, beginner python projects, python tutorial, python programming projects, python project ideas, mini python project, python for beginners, python coding, learn python, python project, python beginner projects, python projects, mini python projects, python basics, python tutorial for beginners, introduction to python, programming for beginners, python projects with source code",27.0,en,en,https://i.ytimg.com/vi/yVl_G-F7m8c/default.jpg,PT53M,573088.0,13169.0,488.0,public,hey there I'm mosh and welcome to python projects for beginners in this course we're not just going to build some cool python projects we're going to dive deep into the process of thinking like a programmer coding isn't just about getting things to work it's about understanding the problem breaking it down and Building Solutions that are clean maintainable and actually make sense most courses will show you how to write code but they don't teach you why you're writing it that way here I will walk you through my entire problem solving process from the initial idea to the final polished Solution by the end of this course you won't have just cool projects under your belt you'll have the skills to tackle coding challenges with confidence and write code that you can be proud of so if you're ready to go beyond just coding and start thinking like a problem solver let's dive into python projects for beginners [Music] now before we jump into projects I want to quickly talk about what you'll need to know to get the most out of this course you don't need to be a python expert to follow along just a basic familiarity with python is all that's required if you know how to work with variables Loops functions and maybe a little bit of file handling you're all set as we go through the projects I'll be using some more advanced python features here and there but don't worry I'll explain those Concepts thoroughly as we encounter them if you feel like you need a little refresher or you want to Di deeper into python I've got you covered you can check out my Python tutorial on YouTube where I'll walk you through the basics in a clear and easier to understand way and if you're looking to really Master python I've got a full course on my website that takes you from the basics to advanced concepts the links are below this video now I want to quickly go over some of the materials that come with this course first we have the project handbook this is a PDF that outlines all the projects we're going to work on together for each project I've included additional challenges for those of you who want to push yourselves further next all the code we write in this course is available on GitHub this is where you can find the complete source code for each project whether you want to compare Your solution with mine or just grab the code to experiment with it's all there for you you'll find the links to both the project handbook and the GitHub repository right below this video all right with that out of the way let's move on to the next [Music] lesson before we dive into the projects I want to take a moment to talk about how I've structured this course and how you can get the most out of it I've designed this course to be Hands-On and practical for each project I'll start by showing you the project and its requirements at this point I encourage you to pause and try to work on this Solution on your own this is where the real learning happens by thinking through the problem and applying what you have learned so far once you have given it a shot come back and watch How I break down the problem into manageable steps and start coding the solution your code may be different and that's totally fine I don't expect your solution to be exactly like mine we all think differently use my solution and code AS inspiration to see if there are better ways to write code for the first few projects if you feel like you're not quite ready to start and finish a project on your own just watch my solution and C along with me then once you have a bit more confidence tackle the other projects on your own and then come back to see my solution for ideas to improve your code look I've been coding for over 25 years and I still encounter challenges depending on the projects I'm working on so if you find some of these projects difficult don't be discouraged that's part of your Learning Journey the things that feel complex today will eventually become simple and you'll be ready to take on new challenges remember this course isn't about quick wins it's about building a strong foundation in problem solving that will serve you throughout your career by the end of each project you will not only have a working solution but also a deep understanding of the logic and thought process behind it now let's get [Music] started all right for our first project we're going to build a dice rolling game so let me show you what happens when we execute this program first we get this question roll the dice here we have only two options yes or no if we type anything else we get an error message saying invalid choice now we can type of Y either lowercase or uppercase it doesn't matter and every time we get two new random numbers just like how we roll a dice now if you type n our program terminates and displays a message saying thanks for playing now I want you to spend 10 to 20 minutes on this project and then come back and see my solution [Music] all right before we jump into coding I always take a moment to map out what I want to do kind of like checking a map before we start a road trip it helps me see the big picture and avoid getting lost along the way so let's quickly plan our approach before we start writing any code trust me it makes things much smoother so in this python file I'm going to use comments to map out how this program should behave so first we should ask the user a question like roll the dice then we should check the user input so if user enters y then we should generate two random numbers and print them otherwise if the user enters no then we should print a thank you message and terminate the program otherwise if the user types anything else we want to print an error message like invalid choice now we want to make sure that the user can keep playing until they decide to terminate the game so we should put these instructions inside a loop for repetition so everything here should go inside a loop an infinite Loop okay now let's start converting these comments into actual code so first we're going to ask the user to roll the dice and to do that we use the input function now here we should type a prompt we can use double quotes or sing quotes different people have different preferences whatever you like just make sure to stick to that so here I'm going to ask roll the dice and give the options yes or no we add a colon followed by a whit space so whatever the user types will be separated from our prompt okay now we store the result in a variable we can call it Choice next we should check if Choice equals y so if Choice equals a lowercase y or Choice equals an uppercase y that's one way to do this but there is a smarter way we can treat whatever the user types as lowercase so look if you hover our Mouse over this Choice variable look at the type the type is a string so the input function returns a string and you know that in Python string objects have a bunch of methods so here we can use the lower method to convert whatever the user types into lowercase with that we can get rid of the second condition okay now we should generate two random numbers and to do that first we have to import the random module now in this module we have a method we can call random. Rand int to generate a random integer or a random number between these two numbers A and B in this case one and six now this returns a random number so we store it in a variable like die one now we have to repeat this to generate the second random number next we should print these numbers so here we call print now for Simplicity we can use a formatted or an F string so we type an F before our quotes and here we add parenthesis inside the parenthesis we want to print our random numbers like one and two but instead of hardcoding these numbers we want to print the actual random numbers that are generated here so we replace one with curly braces to add a placeholder or a hole in our string and inside this hole we add d one and similarly replace two with curly braces and add die two so we print these numbers next we should check if the user types an N so L if Choice equals n then we want to print a thank you message so thanks for playing now to terminate the program we want to break out of our Loop now we haven't added the loop here so on the top now there are two ways to do this some people like to declare a variable like running or playing and initialize it to true then they add it as the loop condition so while playing is true then we're going to repeat these instructions and and when the user types an N we can use the break statement to jump out of this Loop that's one way but there is a better way this variable here is really unnecessary so we can use true as the condition for this Loop and get rid of one extra line of code also note that it's a good practice to add a line bre between our import statements and the rest of the code it makes our code cleaner and easier to the eyes so we're almost there now finally if the user types anything else we want to print an error message so print invalid Choice as simple as that that was our first project depending on your programming skills this might be too easy for you but don't worry as we go through this course our projects will gradually get more complex now if you want to challenge yourself look at the workbook that I give you at the beginning of the course after each project there are ideas for enhancing the program and challenging yourself all right for our next project we're going to build a number guessing game so here is how it's going to work when we run our program it generates a random number between 1 and 100 that we have to guess now if we type an invalid number like a we get an error message so let's type a valid number like 50 now the program is giving us feedback it says this is too high so let's try 25 it's still too high what if we try 10 still too high how about five now it's too low so the number that the computer has generated is between 5 and 10 let's try seven it's too low let's try eight there you go we guessed the number so spend 15 to 20 minutes on this project and then come back and see my solution all right once again before we write any code let's map out what exactly we're going to do so first we should have our program generate a random number then we should ask the user to make a guess now we want to make sure that the user enters a valid number so if the user enters an invalid number so if not a valid number then we want to print an aror otherwise we should give the user some feedback so we can say if this number that the user entered is less than the number to guess we can say this is too low otherwise if this number that the user entered is higher than the number to guess we can say this is too high otherwise that means number equals guess right so in this situation we should say hey well done you made a guess now we want to make sure that the user can make multiple guesses so except the first line we should put the rest of our code inside a y Loop for repetition so here's the structure of our program we don't want to add the first line inside the loop because we want to generate a random number only once okay now let's convert these commments into actual code to generate a random number first we import the random module then we add a line bre to separate our import statement from the rest of our program next we call random. randint to generate a number between 1 and 100 let's store this in a variable called number to guess always use descriptive names for your variables so don't use variable names like n or X or a because someone else reading your code they have no clue what these variables represent okay so number two guess next we should ask the user to make a guess so I don't want to add the loop yet let's just convert this comment into code so here we call the input function and tell the user to guess the number between one and 100 now you know that the input function returns a string so we can store it in a variable like user input now we should convert this to a number and to do that we use the int function we pass user input and store the result in a variable called yes now look user input is only used in a single place there is no need for this variable anywhere else in this program because for the rest of our program we're going to work with this integer so we can simplify our code and make it more concise by removing this variable it's unnecessary so we can get the string that is returned from the input function and pass it directly to the int function with this we can remove this unnecessary variable so when this program is executing first the input function is called then the return value which is a string is passed to the int function okay now how can we validate that this is a valid number well before we do that let's just print yes on the terminal to see if our program works up to this point so this is a good technique for building larger programs always do it in baby steps so instead of implementing the entire program do it in baby steps make sure it works and then move on so so here in the terminal let's run our program and enter an invalid number like a all right look our program crashed because an exception is thrown on this line and here's the type of the exception value error so to handle this situation and prevent our program from crashing we have to add this line inside a tri block so we type try then add indentation now right after try we should type accept followed by the type of error we want to handle in this case value error okay now if we end up here we want to print an error message and say please enter a valid number okay let's run our program one more time so I type A okay this time our program didn't crash instead we got a friendly error message beautiful so we're done with this step now we should give the user some feedback so after the accept block I want to add a line bre to separate this bit of logic from the rest of the logic which is about giving the user some feedback so using these line breaks is like how we break up a story into multiple paragraphs imagine if you read a book and there are no paragraphs obviously reading that book is very difficult so here we can check if gu is less than number to yes reprint a message and say too low now here we have an error message on the guest variable saying guess is possibly Unbound I know this is a weird error message but basically this is happening because we have declared this variable inside the tri block so it's only meaningful inside the tri block this is called the scope of this variable so to fix this error we have to move these two lines inside our Tri block and add anotation so we read a number then we check if it's less than the number to guess otherwise L if guess is greater than number to guess we print to high otherwise that means the user guessed it correctly so here we can say congratulations you guessed the number now let's get rid of these comments we don't need them anymore now we want to put all these instructions inside an infinite Loop so here we type while true and move all these lines inside our Loop now after congratulating the user we should use a break statement to break out of this Loop okay now let's run our program and see what happens so first we enter an invalid number okay we got an error message so we can try again let's type B this time beautiful now let's type a number like 50 it's too high let's try 25 it's too low so let's try 40 too low what about 45 too high so it's between 40 and 45 let's try 43 it's too low it has to be 44 okay our program [Music] terminated all right our next project is a fun game that we have all played in our childhood rock paper scissors game now this project is a little bit more challenging than the previous projects so let me run the program and show you how it works first we get a question rock paper or scissors here we only have three choices r p or S if we type anything else we get an error message saying invalid choice now let me go with r that is short for rock so I chose Rock computer chose paper and I lost now right after we get asked if you want to continue let's try again this time I'm going to go with scissors so I chose scissors computer chose paper I want now I don't want to continue so let's type in the game ends again this project is a bit more challenging than the previous ones so spend about 20 to 30 minutes on this and then come back and see my [Music] solution all right once again before we write any code let's map out what we're going to do so first we're going to ask the user to make a choice now if the choice is not valid we're going to print an error otherwise we should let the computer to make a choice as well next we should print the choices using emojis and this is the font part next we should determine the winner and finally we ask the user if they want to continue if not we're going to terminate the game so this is the structure of our program now let's start coding so first we should ask the user to make a choice to do that we use the input function here we type rock paper or scissors and in parenthesis we can type the valid options so R P and S now we get the result and store it in a variable called user Choice next we should validate the choice so just like before here we're going to call the lower method so we can treat the user's input as lowercase text we talked about this technique in one of our earlier projects now to validate the user's Choice here we can use a bunch of if statements so we can say if user Choice does not equal R and user Choice does not equal p and user Choice does not equal s then we can print an error message and say invalid Choice that's that's one way but this is not a very clever or very professional way to implement this there is a better way we can store the list of valid choices in a list and then check to see if the user's choice is in that list or not so in the first line we can declare a variable called choices and initialize it to a list of valid choices so R P and S now we can simplify this if statement and say if user choice not in choices then print an error message this implementation is more concise and more elegant now we can further improve this and convert this list to a topple why because lists can be modified in our program so somewhere you might accidentally modify the list and use the append method to add a new item to the list or remove method to remove one of the existing items this could be an accidental mistake but if you convert this to a top hole it becomes read only so top holes look they don't have the remove or append methods so a topple is just like a readon list okay so we have our valid choices and we are done with this step now before going further Let's test our program so I'm going to remove these two lines now back to the terminal let's run our program so if you type a we get an error message beautiful but if ify Type R we don't get an error great next we should let the computer to make a choice and to do that first we have to import the random module now earlier we used the Rand in method to generate a random number between two numbers but here we want to use a different method and that is Choice with this we can pass a list or a top hole like choices and let the computer choose one of these valid choices so so let's store the result in a separate variable like computer choice so we're done with this step now let's print the choices so first I want to print the choices without emojis just to make sure that our program is working up to this point so here we can type you chose and then use concatenation to append user's Choice here that's one way but a better and more elegant way is to use a formatted string so we prefix the string with an F which is short for formatted and here we add curly braces to insert a value dynamically in this case user Choice with this we don't have to use concatenation okay similarly we can duplicate this line and say computer chose and here we add computer Choice okay let's run our program so I Type R okay we both chose Rock let's try again that's weird it's happening twice let's run it one more time I'm going to select s okay so I selected scissors computer selected Rock beautiful now we should print emojis how can we do that well there are two ways one way is to use an if statement and say if user Choice equals R then we can print an emoji on Mac you can bring up the emoji keyboard by pressing control command land and space on Windows I'm not entirely sure so here we can type Rock and select this rock okay now similarly we can add a second condition and say if user Choice equals s then we're going to print scissors but again this approach is not the best way because we need three statements to map these letters to emojis let me show you a better way first let me remove these few lines okay now in Python we have a data structure called a dictionary a dictionary is used to map a key to a value so we can map the character R to the emoji of a rock similarly we can map the letter s to scissors okay now how can we declare a dictionary well here we can declare a variable called emojis and set it to curly braces inside the braces we type key value pairs so our key is going to be R then we type a colon and map it to the emoji of a rock note that in this case both our key and value are strings but this is not a requirement so we can map a string to a number or an object whatever we want to do now similarly let's map s to scissors and also P2 paper okay now let's remove these comments back to the part about printing the user's Choice instead of printing the user's Choice which is a letter like r p or S we are going to go to this dictionary and look up the value associated with a given key so here we type emojis then using square brackets we can look up the value associated with one of these Keys now here in the aut completion box we can see the valid Keys which are p r or S but we're going to replace this with user choice now similarly here we type emojis and pass computer Choice let's run the program one more time if I type R I get rock and computer chose Caesar beautiful all right we're done with this step the next step is deter determining the winner now before moving forward I want to add some line brecks to divide our code into different segments just like the paragraphs of an article so on the top we are declaring our emojis and valid choices these two lines are highly related so I want to keep them together but look at the next line the next line is about getting the user input this line has nothing to do with the previous lines so it's like a different paragraph in a story so here we add a line break now again these three lines are highly related because they are part of getting the user's input so we want to keep them together but separate them from getting the computer's choice now once again we add the line break here because this segment is all about printing the users and computer's Choice okay now let's move on to the next segment which is determining the winner so we add a line bre and here we can check if user choice is the same as computer choice then we print Tai elif or Al if now here we want to implement the scenario where the user wins there are three scenarios one is user choice is rock and computer choice is scissors in this case we want to print uin there's another scenario where user choice is scissors and computer choice is paper again here we can print you win but there is a better way we can combine these two statements into a single statement using the logical or operator so this is one scenario or one condition where the user wins as you can see I've selected this expression now we type left bracket so the entire expression is now surrounded by parenthesis right after we type or now here we should select our second condition again we type a left bracket to surround this with parentheses now we select the entire expression cut it and put it right here now similarly we type another or operator and add the third condition and that is user Choice equals P or paper and computer Choice equals Rock so if any of these conditions is true the user wins otherwise the user loses okay now this line is getting a little bit too long so to make our code more readable we can break it down into multiple lines so right after this or operator we add a line bre now here we have an error saying expected expression because python interpreter expects a colon here so to tell The Interpreter that this is a multi-line statement here we add a backslash okay now to better format our code it's better to line up all these conditions so we put this on a new line add tab again on this line we add a backslash now these two conditions are perfectly align now similarly let's add another backslash and put this condition on a new line now what is happening here we had an extra white space okay we're good so this is one way to break this code down into multiple lines but all these backs slashes are kind of ugly let me show you a better way look here we have three conditions each surrounded by parenthesis now we can grab all these three conditions and wrap them with parenthesis like this we can remove the backslash here we add parenthesis so the left one is here and the right one should be at the end right here with this we no longer need these back slashes anymore so python interpreter knows that the this outer parenthesis represents a long expression okay so we're almost there we determine the winner next we should ask the user if they want to continue so once again we add a line break to separate this segment from the previous segment which is about determining the winner and then use the input function to ask the user if they want to continue or not so right away we call the lower method and then store the result in a variable like should continue we cannot use the word continue because this is a reserved keyword in Python okay so here we check if should continue equals n then we want to terminate the program now to do this first we have to add these statements inside a y Loop so here we add a y loop with true as the condition now let's indent all these lines so if the user types an N then we want to break out of this Loop to terminate the program otherwise if they type why or anything else we can treat it as yes so let's run our program first let's try an invalid Choice like a all right our program crashed on this line line 13 where we try to show the Emoji associated with the user's choice now obviously in this dictionary dictionary of emojis up here we don't have a key with the value of a right so look down here we validating the user's choice if the user types an invalid choice we just print an error message but the rest of the code gets executed so we end up on this line and this line throws an exception to fix this issue right after printing an error we should use the Contin Contin statement to jump back to the beginning of the Y Loop so we ask the user one more time to make a choice let's try it one more time if I type an a we get an error message and our program doesn't crash beautiful let's try again B great now if I type R I chose Rock computer chose scissors and I want beautiful now shall we continue if I type yes I get a chance to make another Choice let's go with P I chose paper computer chose Rock so I want again great now if I type in our program terminates all right our program is working but just because it's working it doesn't mean our work is finished we should always review our code and find Opportunities to refine and improve it in coding this is called refactoring it's basically a fancy term for changing the structure of our code without changing its functional ity in this lesson we're going to look at a common refactoring technique called modularization modularizing code means breaking down a large program into smaller reusable Parts called modules or functions think of it like organizing a messy room into different boxes each holding specific items instead of having one big pile of everything we put related things together making it easier to find what we need and keep things tidy now back to this code earlier we talked about different segments in our program so we have a segment for displaying choices we have another segment for determining winner and so on now we're going to extract these segments into small functions each having a single responsibility let me show you how we do this so we start from the top these few lines have a single responsibility and that is getting the user's choice so we can extract these few lines into a separate function called get user choice so up here after we declare our emojis and choices let's define a function called get user choice always use descriptive names for your functions okay now let's move these few lines inside this function now here we have an error because the continue keyword can only be used inside the loop so here we need to add a y Loop while true then we move these view lines inside this Loop so if the user enters an invalid choice we print an error and then continue which means we jump to the beginning of the Y Loop otherwise we break out of this Loop and at the end we should return a value from this function what value user's choice so here we use the return statement to return user choice now there is a better way to write this code instead of breaking out of this Loop we can return user's choice right here so return user Choice with this we can make our function slightly shorter okay now let me show you what happens if we swap these if and else statements so instead of checking if user choice is not in the list of choices we check if user choice is in the list of choices in this case we're going to return immediately so return user Choice otherwise we are going to print an error message and continue okay now with this implementation we don't even need the continue keyword because if we end up here we print an error and then the control automatically moves to the beginning of the Y Loop so we can get rid of the continue statement and make our code slightly shorter okay now back to our main y Loop earlier we had a few lines for getting users input those lines are now inside the get user Choice function so here we call get user Choice get the result and store it in a variable called user Choice okay next we're going to apply the same technique to these two lines these two lines are highly related and have a single responsibility displaying choices so let's select these two lines cut now after this function we Define another function called display choices good now back to our y Loop right here we call display choices okay next we need to extract this F lines for determining the winner again select cut let's define a new function determine winner now here we have an error because we need to add indentation here good now back to our y loop after we display the choices we call determine winner good now we can do the same thing with our y Loop so we can extract this entire logic and put it into a separate function let's call that play game this is where we have our game logic let's select all this code and add ination good so here's the end result now if you look up here we have a bunch of Errors because in this function display choices we do not have a variable called user choice this variable is declared inside our play game function so to fix this issue we have to pass user choice and computer choice to these functions so we go to our display choices function and give it two parameters user choice and computer choice now the errors are gone similarly in determine winner we add two parameters user choice and computer Choice the errors are gone beautiful now when calling these functions we should pass these values as arguments user choice and computer Choice one more time user choice and computer Choice good now one last thing if we run our program nothing happens because after this refactoring we move different lines of our code inside different functions but currently none of these functions is getting called so at the end we have to call the play game function so our program starts let's run it one more time there you go let's enter an invalid Choice it's still working let's type R our program is working and let's terminate it beautiful so with this refactoring we broke down our program into small reusable functions each of these functions has only a few lines so if there is a bug in one of these functions we can only focus on those few lines this is easier than reading and understanding an entire script this is the benefit of modularizing [Mus,
c] code we have one more opportunity for improving this code look there are multiple places where we have defined our choices this is bad for two reasons one reason is that if we have a typo in our code our program is not going to work that's number one problem the second problem is that if tomorrow we decide to change our choices from R S and P to something else like 1 2 and three there are multiple places that we have to modify in programming we have this principle called dry which is short for don't repeat yourself so we don't want to have repetition or duplication in our code most of the time it's a bad practice practice so how can we solve this problem well we can generate this top hole based on this dictionary in this dictionary we have three key value pairs our keys are R S and P so let me show you how we can convert this dictionary to a tople with these values first I'm going to select this line and the rest of the code now we can convert all these lines to a comment by pressing command and slash on Mac or control and slash on Windows now all these lines are commented out so they're not going to get executed we only have the Declaration of our dictionary now let's print emojis dot look here we have a method called keys which Returns the keys of this dictionary using this structure dict keys let me show you so back to the terminal let's run our program all right here's what we get we get an object of type dict keys or dictionary keys and here we have R S and P but this is not exactly what we want what we want is a topple but this is very easy to fix we can pass the object that is returned from this method to the topple function and with this we get a top hole exactly like the top hole that we declared here so we can set choices to top hole of emojis do Keys okay with this technique we remov duplication in our code now let's bring back all the code here so one more time we press command and slash on Mac or control and slash on Windows okay now look there are other places where we have repeated our choices again if we have a typo our program is not going to work so realistically we need a single place for defining our choices to do that we can go to the top and declare a bunch of constants by convention we use uppercase letters to declare constants so we can declare a constant like rock and set it to R similarly scissors and paper this is a single place where we declare our choices now anywhere we have R S and P we replace them with our constants so I have selected R here now to select the next occurrence of R in this code we press command and D on Mac or control and D on Windows look this instance is also selected one more time we press command and D there you go now we have three cursors all of them selecting R so we can replace them all with rock in one go now to cancel multic cursor editing we press the escape button twice okay one more time we're going to select s we press command and D twice to select these two instances as well and replace this with scissors again we press the skape button twice done and the last one paper okay now we have a single place where we have defined our choices so no chance for typos and if we decide to change the choices from RS and P to something else in the future there is a single place we have to update we can change this to one two and three and everything will work okay but there is another benefit here look down here where we determine the winner our code is more descriptive so instead of comparing user choice and computer Choice with r and s we can clearly see that if the user has a rock and the computer has scissors the user is the winner hey there I hope you've been enjoying this video so far if you're finding this helpful and want to take your python skills even further I've got something really exciting for you this video is just a taste of what you will find in my full course python projects for beginners in the full course we dive deep into more projects covering a wide range of Concepts that will help you sharpen your problem solving skills and become a confident python programmer if you're ready to level up check out the link below to get access to the full course I would love to see you there and help you on your python Journey all right for our next project we're going to build a QR code generator so first we enter some text or URL I'm going to enter the address of my website code with mos.com next we enter a file name let's enter m.jpg now we have a QR code saved in this file this file is right here so this is the QR code for my we it if you scan this with your phone it will open your browser and take you to my website now to build this we're going to use a thirdparty library called QR code so head over to p.org proqr code read the documentation for this Library the purpose of this project is to get you familiar with using thirdparty libraries so this project doesn't have really complex logic it's all about the right way to use third party packages so I spend a few minutes to go through the documentation then install this library and build this project all right the first thing we're going to do is set up a virtual environment a virtual environment in Python is like a separate isolated workspace on your computer where you can install packages and run python projects think of it as a clean organized room that's separate from the rest of your house in this room you have everything you need to work on a specific Project without affecting anything else in the house now why do we need a virtual environment well imagine you're working on two different python projects one project needs an older version of a library and the other project needs a newer version if you install both versions globally for the whole computer they might conflict with each other a virtual environment solves this problem by allowing each project to have its own separate environment with its own specific versions of libraries okay so to set up a virtual environment here we open the terminal window and type python if you're on Windows or Python 3 if you're on Mac then we type-m that is short for module we're going to run this module VM that's one of the built-in modules in Python for creating virtual environments and then we specify a name for our virtual environment by convention we often use VMV as well okay now vs code is saying we noticed a new virtual environment has been created do you want to selected for the workspace folder for now select no we come back to this later now take a look at the project directory we have this new folder here VM and inside this we have a bunch of folders like bin include and lip inside the bin folder we have executables like pip pip 3 python python 3 and so on now if you're a bit more experienced and are familiar with Git You can see that we have over a th000 files ready to be committed to our Repository we don't want to include these files in our repository so to exclude them here in the root of our project we add a new file called dogit ignore in this file we add the files and folders We want to exclude from our git repository in this case VN folder so we add a forward slash here okay now if you're not familiar with Git don't worry about it just ignore this step for now okay so we have created a virtual environment but current L it's not active so we go back to the terminal to activate it if you're on Windows you type VM back slash scripts back slash activate if you're on Mac you type Source VN slash bin SL activate Okay now look this virtual environment is activated so any packages that we install will be installed in this virtual environment or in this isolated workspace when we are done with this project we can deactivate this virtual environment by typing deactivate okay now let's activate it one more time good now in this virtual environment we're going to install the QR code package all right good with this installed now we add a new file to our project QR code generator. Pi first we import the QR code module next we use the input function and tell the user to enter some text or URL we get the result and store it in a variable called Data next we use the input function to get a file name so enter the file name and rest store it here now it's a good practice to remove any white spaces around what the user types for example what if the user types let's say the address of my website as the URL whether they type this address or this address followed by a whites space we want to have the same QR code generator so over here we can call the strip method to get rid of any white spaces around our data okay similarly I would like to strip any white spaces around the file name good now we ready to generate our QR code to do that we go in the QR code module and create create a QR code object here we want to set two parameters one is box size I'm going to set it to 10 these are just arbitrary values I'm going to set border to four this returns a QR code object we store it in this variable next we call qr. add data then we pass our data next we call qr. make image and set two arguments here one is fill color which I'm going to set to Black again these are arbitrary values you can use any colors you want we also set back color to white this returns an image that we store in a variable and finally we call image. saave to save it in this file and at the end we print QR code saved as now here we want to add the file name so let's convert this to a formatted string and insert the file name here now let's run our program so I'm going to enter the address of my website code with m.com and for the file name I'm going to enter m.jpg okay now look in this folder we have mh. jpg this is my QR code so if you point your phone at this and scan it this will open your browser and take you to my website hey there I hope you've been enjoying this video so far if if you're finding this helpful and want to take your python skills even further I've got something really exciting for you this video is just a taste of what you will find in my full course python projects for beginners in the full course we dive deep into more projects covering a wide range of Concepts that will help you sharpen your problem solving skills and become a confident python programmer if you're ready to level up check out the link below to get access to the full course I would love to see you there and help you on your python Journey,TRUE,,,,,,,,,,,,,,
6GQRb4fGvtk,The Complete DevOps Roadmap,"Go from zero to a DevOps Engineer in 10-14 months. This step-by-step roadmap covers the essential skills you need to become a DevOps Engineer in 2024. 

‚ù§Ô∏è Join this channel to get access to perks:
https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join

Download the FREE roadmap PDF here: https://mosh.link/devops-roadmap

‚úã Stay connected

- Complete courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üìö Tutorials 

https://youtu.be/_uQrJ0TkZlc?si=ZhlCrQs1SkaPNVa8
https://youtu.be/8JJ101D3knE?si=OGTuS35LQqSunuhh
https://youtu.be/pTFZFxd4hOI?si=DkijlBq9w076bm2l

üìñ Chapters

00:00 - Introduction
00:25 - Linux Fundamentals
00:59 - Networking Concepts
01:38 - Git
02:03 - Programming Languages
03:03 - Cloud Providers
03:36 - Containerization
04:04 - Continuous Integration/Continuous Deployment (CI/CD)
04:51 - Container Orchestration
05:28 - Networking & Infrastructure Services 
06:00 - Configuration Management 
06:26 - Infrastructure as Code (IaC)
07:04 - Monitoring & Logging

#devops",2024-08-15T13:00:08Z,"devops roadmap, devops, aws, devops engineer skills, devops path, learn devops from scratch, how to become a devops engineer, devops career path, devops for beginners, code with mosh, mosh hamedani, programming with mosh, is coding required for devops, learn devops, ansible, azure, devops toolkit, docker",27.0,en,en,https://i.ytimg.com/vi/6GQRb4fGvtk/default.jpg,PT8M1S,473414.0,13836.0,431.0,public,if you're looking to break into devops or want to level up your skills you're in the right place today I'm sharing the complete devops road map I'll walk you through the essential skills you need the tools I personally recommend and how much time you should spend on each assuming you dedicate 3 to 5 hours of studying every day this road map should take you about 10 to 14 months to complete let's Jump Right In first off we have Linux fundamentals Linux is the backbone of servers and Dev vment environments as a devops engineer you'll be setting up and maintaining the infrastructure where applications run most servers use Linux so getting comfortable with it especially the command line is crucial I recommend starting with learning bash which is the most commonly used shell and scripting language in Linux spend about 2 to 3 weeks on this make sure to learn basic Linux commands for working with the file system permissions and ownership processes and signals as well as managing packages next you need to learn networking Concepts networking is all about how computers communicate with each other think IP addresses and protocols you need to understand how data moves around security and troubleshoot network issues to get hands-on experience I recommend using wihar dedicate around two weeks on this make sure to learn Concepts like OSI and tcpip models IP addressing and subnetting DNS and DHCP networking protocols like HTTP https FTP and SSH firewalls and security groups and basic Network troubleshooting using tools like Ping trace route and net stat now let's talk about git git is a version control system that lets you track changes in your code and collaborate with others it's essential for working on projects with a team and managing your code effectively spend one to two weeks getting comfortable with Git make sure to learn basic git commands like clone commit push and pull branching and merging resolving merge conf working with remote repositories and so on after that you should dive into programming languages programming languages like python Ruby and go are used to automate tasks and manage configurations while there are several other languages I personally recommend python for its Simplicity powerful libraries and versatility dedicate four to 6 weeks to build a solid foundation in Python make sure to Learn Python syntax and data structures like lists dictionaries sets and topples modules and packages learn how to write and execute Python scripts work with files handle errors write automation scripts and so on by the way to help you on this journey I've created a free supplementary PDF that breaks down the specific Concepts you need to learn for each skill it's a great resource to review your progress find gaps in your knowledge and prepare for interviews you can find the link in the description box also I have a bunch of tutorials on this channel and complete courses on my website if you're looking for structured learning again links are in the description box moving on let's talk about Cloud providers Cloud providers like AWS Azure and Google Cloud platform offer a range of services for building and deploying applications if you're just starting out I recommend focusing on one cloud provider and AWS is a great choice because it's the most widely used spend about 4 to 6 weeks on this make sure to learn how to launch configure and manage virtual servers store and manage data get familiar with is managing users groups and roles and how to set up and manage isolated networks next up is containerization containerization is all about packaging an application and its dependencies into a container to ensure it runs the same everywhere Docker is the go-to tool for this spend about 3 to four weeks getting comfortable with Docker learn how to create Docker images get familiar with starting stopping and managing containers learn how to write Docker files explore how to define and run multicontainer applications using Docker compos and so on now let's dive into continuous integration and deployment or cicd cicd automates the integration and deployment of code changes allowing for frequent and reliable releases genkins is a powerful tool for setting up cicd pipelines but other popular tools include gitlab cicd Circle CI and Travis C if you're starting out just focus on Jenkins for its versatility and strong Community Support dedicate 3 to four weeks on this make sure to understand how to create and manage Jenkins pipelines get familiar with writing Jenkins files learn how to integrate automated tests into your pipelines understand how to automate the build process for your applications explore how to automate the deployment of your applications to various environments and so on moving forward let's discuss orchestration and management orchestration tools like kubernetes and Helm help automate the deployment scaling and management of containerized applications these tools are essential for managing complex applications in production start with kubernetes and spend about four to 6 weeks on it make sure to learn about the overall architecture including the master node and worker nodes and how they interact understand the key components such as pods services and deployments get familiar with managing resources learn how to scale your applications as well as the networking model in kubernetes next we have networking and infrastructure services this involves setting up and managing services like reverse Proxes forward Proxes caching servers firewalls and load balancers I recommend using engine X for handling reverse Proxes and load balancing give this about 3 to 4 weeks of your time learn how to set up and configure engine X as a reverse proxy understand how to configure it to act as a forward proxy explore caching strategies to improve the performance and how to configure firewalls and security groups now let's talk about configuration management configuration management tools like anible puppet and Chef automate the deployment configuration and management of servers and applications if you're starting out just focus on anible due to its Simplicity and Powerful features spend 3 to four weeks on this learn how to write anible playbooks understand how to use roles and modules learn to manage variables and templates and so on moving on let's discuss infrastructure as code or IAC IAC involves managing and provisioning Computing infrastructure through machine readable configuration files popular tools include terraform AWS cloud formation and palumi if you're starting out just focus on terraform for its flexibility and widespread use dedicate 3 to four weeks to build a solid foundation in terraform understand the basic concepts like providers and resources get familiar with writing terraform configuration files learn how to use terraform modules as well as advanced concepts such as workspaces and remote State finally let's talk about monitoring and logging monitoring and login tools such as Prometheus Graff elk stack and fluent D track the performance and health of your applications and infrastructure if you're starting out just focus on Prometheus and grafana spend about 3 to four weeks on these tools learn the architecture and data model of Prometheus get familiar with collecting metrics from various sources learn how to write queries to extract and analyze metrics data understand how to set up alerts and so on so if you dedicate 3 to 5 hours every day you can follow this road map and pick up all the skills you need to become a devops engineer in about 10 to 14 months if you have any questions please let me know in the comments below and I'll do my best to answer you right here or in my future videos If you enjoyed this video please give it a like And subscribe for more useful content thanks for watching,True
YRJbhFLLPyE,The Complete Data Analyst Roadmap,"Go from zero to a data analyst in 8-16 months. This step-by-step roadmap covers the essential skills you must learn to become a data analyst in 2024. 

‚ù§Ô∏è Join this channel to get access to perks:
https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join

Download the FREE roadmap PDF here: https://mosh.link/data-analyst-roadmap

‚úã Stay connected

- Complete courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üìö Tutorials 

https://youtu.be/_uQrJ0TkZlc?si=ZhlCrQs1SkaPNVa8
https://youtu.be/8JJ101D3knE?si=OGTuS35LQqSunuhh
https://youtu.be/7S_tz1z_5bA?si=QL7s_M2Ao90RDwG8

üìñ Chapters

00:00 - Introduction
00:20 - Mathematics & Statistics
00:42 - Excel
00:59 - SQL
01:18 - Python 
01:41 - Git 
02:23 - Data Collection and Preprocessing
02:39 - Data Visualization 
03:07 - Machine Learning Fundamentals
03:26 - Big Data

#dataanalyst #datascience #machinelearning",2024-08-06T13:00:37Z,"data analyst roadmap, data analyst, machine learning, data science, excel, how to become a data analyst, data analyst beginner, data analytics career, how to become data analyst, become a data analyst, step by step roadmap to become data analyst, data analytics, power bi, complete data analyst roadmap, code with mosh, programming with mosh, mosh hamedani",27.0,en,en,https://i.ytimg.com/vi/YRJbhFLLPyE/default.jpg,PT4M8S,540529.0,14854.0,320.0,public,if you want to become a data analyst there are several essential skills you need to master let's type in and check them out one by one being a data analyst is all about analyzing data to help make Better Business decisions you'll need to get good at various skills from math and programming to data handling and visualization let's jump in first up you need a solid foundation in mathematics and statistics this is crucial because data analysis relies heavily on these principles focus on understanding basic concepts like mean median standard deviation probability and hypothesis testing spend about a month or two getting comfortable with these topics next you need to get really good at Excel Excel is a powerful tool for data analysis and many companies still rely on it learn how to use functions pivot tables and charts spend about 2 to 3 weeks mastering Excel as it's a fundamental skill for any data analyst after Excel you should get comfortable with SQL SQL stands for structured query language it's a simple language we use for managing and querying databases learn how to write queries to access organize and analyze data SQL is pretty simple and you can get a decent grasp of it in about a month or two next you need to get the hang of python it's a versatile language that's widely used in data analysis focus on learning the basics of python including libraries like pandas and nonp you will also hear about r R that's another language used in data analysis however if you're starting out it's best to stick with python first and think about learning R later spend about a month or two getting the hang of python you should also learn git that's a Version Control System we use to track changes to our code and collaborate with others git has a ton of features but you don't need to learn all of them think of it like the 8020 rule 80% of the time you use 20% of GS features so one to two weeks of practice is enough to get up and running by the way to help you on this journey I've created a free supplementary PDF that breaks down the specific Concepts you need to learn for each skill it's a great resource to review your progress find gaps in your knowledge and prepare for interviews you can find the link in the description also I have a bunch of tutorials on this channel and complete courses on my website if you're looking for structured learning again links are in the description next focus on data collection and preparation this means Gathering data from various sources and cleaning it up so it's ready for analysis learn how to use Python libraries like pandas to manipulate and clean data spend about a month or two on this once your data is clean you need to visualize it to spot patterns and communicate results learn how to use Python libraries like ma plot lib and Seaborn also check out business intelligence tools like Tableau or powerbi they are widely used for creating interactive and sharable dashboards powerbi is especially cool because it's getting more popular and since it's a Microsoft product it works great with other Microsoft tools you might be using spend about a month or two on data visualization now while not essential for every data analyst role having a basic understanding of machine learning can be a plus machine learning involves teaching computers to make predictions Based on data if you're interested spend a month or two learning the basics of machine learning including python libraries like tensor flow and psychic learn now as you advance you might encounter situations where you need to work with Ma massive data sets that's where Big Data comes in Big Data is all about handling and processing huge amounts of data quickly tools like Hadoop and Spark are super handy for this spend a month or two getting familiar with these tools so if you dedicate 3 to 5 hours every day you can follow this road map and pick up all the skills you need to apply for an entry-level data analyst job in about 8 to 16 months if you have any questions please let me know in the comments below and I'll do my best to answer you right here or in my future videos If you enjoyed this video please give it a like And subscribe for more useful content thanks for watching,True
9R3X0JoCLyU,The Complete Data Science Roadmap,"Go from zero to a data scientist in 12 months. This step-by-step roadmap covers the essential skills you must learn to become a data scientist in 2024. 

‚ù§Ô∏è Join this channel to get access to perks:
https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join

Download the FREE roadmap PDF here: https://mosh.link/data-science-roadmap

‚úã Stay connected

- Complete courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üìö Tutorials 

https://youtu.be/_uQrJ0TkZlc?si=ZhlCrQs1SkaPNVa8
https://youtu.be/8JJ101D3knE?si=OGTuS35LQqSunuhh
https://youtu.be/BBpAmxU_NQo?si=dm-ZCPxVBYWS1Qhn
https://youtu.be/7S_tz1z_5bA?si=QL7s_M2Ao90RDwG8

üìñ Chapters

00:00 - Introduction
00:24 - Programming Languages
00:45 - Version Control
01:05 - Data Structures & Algorithms 
01:25 - SQL
02:08 - Mathematics & Statistics
02:30 - Data Handling and Visualization
03:19 - Machine Learning
04:01 - Deep Learning
04:35 - Specialization
05:24 - Big Data

#datascience #machinelearning #ai #coding #programming",2024-08-01T13:00:08Z,"data science roadmap, data science roadmap for beginners, complete data science roadmap, how to become data scientist, learn data science roadmap, data science for beginners, how to become a data scientist, code with mosh, programming with mosh, mosh hamedani, data science, tech career, data scientist roadmap, data science learning path, tech skills, career development, learn data science, data engineer, how to learn data science, machine learning",27.0,en,en,https://i.ytimg.com/vi/9R3X0JoCLyU/default.jpg,PT6M13S,557532.0,16877.0,392.0,public,if you want to become a data scientist there are nine essential skills you need to master let's dive in and check them out one by one data science is all about analyzing and interpreting complex data to provide actionable insights as a data scientist you'll need to get good at a bunch of different skills from programming and math to data handling and visualization let's jump in first up you need to get the hang of python it's the main language in data science and it's pretty easy to pick up you can get a decent grasp of it in about a month or two then there's R it's another popular language in data science start with python because it's super versatile and once you're comfortable with it you can dive into R for its cool statistical and visualization features next you need to learn git git isn't a programming language it's a Version Control System we use to track changes to our code and collaborate with others git has a ton of features but you don't need to learn them all think of it like the 8020 rule 80% of the time you use 20% of GS features 1 to two weeks of practice is enough to get up and running next you need to dive into data structures and algorithms understanding these Concepts will boost your problem solving skills which is key for tackling complex challenges plus speak take companies like Google Amazon and Facebook always ask about them in job interviews spend about a month or two on this and you'll be in great shape next you need to get comfortable with SQL SQL stands for structured query language it's a very very simple language we use for working with databases as a data scientist you should know how to use SQL to access organize and analyze the data you need SQL is pretty simple and you can get a decent grasp of it in about a month or two by the way to help you on this journey I've created a free supplementary PDF that breaks down the specific Concepts you need to learn for each skill it's a great resource to review your progress find gaps your knowledge and prepare for interviews you can find the link in the description box also I have a bunch of tutorials on this channel and complete courses on my website if you're looking for structured learning again links are in the description box next you need a solid foundation in mathematics and statistics this is crucial because data science relies heavily on these principles focus on linear algebra calculus probability and statistics these will help you understand data analysis techniques and how to interpret data correctly spend about 2 to 3 months mastering these topics I'm after that you need to get good at preparing and visualizing data this means cleaning up the data and organizing it in a way that makes it easy to analyze you'll need to Learn Python libraries like pandas and numpy to manipulate and clean the data once your data is clean you need to visualize it to understand patterns and communicate results libraries like matte plot lip and Seaborn help you create insightful visualizations to identify Trends and anomalies also why not strictly necessary getting familiar with business intelligence tools like Tableau or powerbi can give you an edge because these tools are widely used in the industry for creating interactive and sharable dashboards if you already have a solid background in Python and SQL you can get a good grasp of data pre-processing and visualization in a month or two next up you'll need to get a handle on machine learning fundamentals machine learning algorithms fall into two categories supervised and unsupervised in supervised learning the model learns from labeled data meaning each input comes with a known output in unsupervised learning the model works with unlabel data and tries to figure out patterns and relationships on its own it's important to learn about these types of algorithms and how they work you'll also need to get familiar with tools like tensor flow pytorch and psyit learn which are used to build and train machine learning models dedicate about 3 to 4 months to master the core machine learning Concepts and how to use the these tools effectively after you've got the basics of machine learning down it's time to explore deep learning deep learning is a subset of machine learning that uses neural networks with many layers that's why we call it deep these networks are great for handling more complex tasks like image and speech recognition start with understanding the basics of neural networks and then move on to more advanced architectures like cnns and rnns tools like tensor flow and Pie torch are also essential here spend about 2 to 3 months getting a good grasp of deep learning Concepts and how to implement them all right at this point youve got a solid foundation in data science it's like you have become a general doctor now doctors often specialize in different areas like the heart or kidneys similarly you should consider specializing in exciting Fields like natural language processing also called NLP or computer vision NLP is all about working with text and language data it's used for things like analyzing sentiments in text translating languages and creating chat pods like chat GPT computer vision on the other hand is about teaching computers to understand and interpret visual data like images and videos it's used in facial recognition detecting objects and even in self-driving cars now you don't need to learn them both unless you're very enthusiastic so pick the one that interests you the most spend two to 3 months diving deep into one of these areas now as you move forward in your data science path there might come a time when you need to work with massive data sets that's where Big Data comes in Big Data is all about handling and processing huge amounts of data quickly tools like Hadoop and Spark are super handy for this spend 2 to 3 months getting the hang of these tools and you'll be able to spot patterns and trends that you wouldn't catch with smaller data sets so if you dedicate 3 to 5 hours every day you can follow this road map and pick up all the skills you need to apply for an entrylevel data science job in about 12 to 20 months if you have any questions please let me know in the comments below and I will do my best to answer you right here or in my future videos if you enjoy this video please give it a like And subscribe for more useful content thanks for watching,True
GxmfcnU3feo,The Complete Web Development Roadmap,"Go from zero to a full stack web developer in 12 months. This step-by-step roadmap covers the essential skills and latest technologies to become a web developer in 2024. 

‚ù§Ô∏è Join this channel to get access to perks:
https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join

Download the FREE roadmap PDF here: https://mosh.link/web-roadmap

‚úã Stay connected

- Complete courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üîó Other roadmaps

https://youtu.be/7IgVGSaQPaw?si=nBuvDkGY314211WM
https://youtu.be/yye7rSsiV6k?si=NNyTV354jvuKVzpu

üìö Backend Tutorials 

https://youtu.be/_uQrJ0TkZlc?si=QA5qvbvk60uP-7Gu
https://youtu.be/eIrMbAQSU34?si=PmdmS1vo9Gp4yRxR
https://youtu.be/8JJ101D3knE?si=OGTuS35LQqSunuhh
https://youtu.be/BBpAmxU_NQo?si=dm-ZCPxVBYWS1Qhn
https://youtu.be/NU_1StN5Tkk?si=gsMONPdgxouQOolu
https://youtu.be/7S_tz1z_5bA?si=wUNE0zrN_6uWrO7d
https://youtu.be/rHux0gMZ3Eg?si=w1h0R4U8freF5xPT

üìö Frontend Tutorials 

https://youtu.be/qz0aGYrrlhU?si=8d3Q5kiE83nMJZAG
https://youtu.be/W6NZfCO5SIk?si=WXcgkjHSsGFyXZC2
https://youtu.be/d56mG7DezGs?si=Bng_nVPU7VQrxaa7
https://youtu.be/8JJ101D3knE?si=OGTuS35LQqSunuhh
https://youtu.be/SqcY0GlETPk?si=hbktR9plzOgfuvpZ
https://youtu.be/ZVnjOPwW4ZA?si=VG6XInWdFW8d0Sog
https://youtu.be/zuKbR4Q428o?si=U_e5ITtUGFptQoqw
https://youtu.be/0-S5a0eXPoc?si=1l1qX0YwbQN7BEuo

üìñ Chapters

00:00 - Web Development 
01:04 - Back-end Development 
08:58 - Front-end Development 

#programming #webdevelopment #coding",2024-07-25T13:00:16Z,"web development roadmap, full stack roadmap, learn to code, full stack development, web development, programming, coding, code with mosh, programming with mosh, mosh hamedani, frontend, backend, software engineering",27.0,en,en,https://i.ytimg.com/vi/GxmfcnU3feo/default.jpg,PT15M15S,990961.0,21307.0,697.0,public,let's talk about the skills you need to become a web developer web development is generally broken down into two areas frontend development and backend development and then full stack development which is a combination of both frontend development is all about what the user sees and interacts with it's the website in your browser or the app on your mobile phone or tablet backend development handles everything behind the scenes like data processing storage and logic you can start on either end but if you're starting out and pursuing a career in web development I recommend you to start with the backand because it gives you a solid foundation in programming and problem solving plus when you transition from back end to front end you'll have a deep understanding of what happens under the hood in contrast if you start with the front end back end looks like a mystery and you'll have no idea what's really happening under the hood so in this video first we're going to cover the skills you need to become a backend developer and then we'll talk about front-end development to become a backend developer there are five essential skills let's go over them one by one the first step to learning backend development is to pick up a programming language here we have a few options like JavaScript python Ruby Java C and go just to name a few now which one is the best well it's almost impossible to pick one language as the best or the ultimate language because the choice of language depends on various factors like project requirements team expertise and performance needs for example JavaScript is used for full stack development because we can use it on both the front end and the back end in contrast Python and Ruby are often used for rapid prototyping and fast development Cycles Java and C are often used in building large scale Enterprise grade applications they're heavily used in large organizations and government systems and go is used for performance critical and concurrent applications now the common mistake I see among my students is that they try to learn many of these languages hoping that this would increase their job opportunities but it doesn't work that way because learning a language is only the first step you also need to learn the ecosystem of tools and libraries for that language to land a job so if you're starting out just stick to one language whichever you like but also do a bit of research and see how many job opportunities are available for that language where you live generally speaking there are often more job opportunities for python Java and JavaScript but again I want you to do your own research now assuming that there are more job opportunities is for these three languages in your town and you're not sure what language to start with I would recommend python because it's the easiest and has a simple readable syntax that's great for beginners my second choice is Java because it's a solid language and is often taught to computer science and software engineering students JavaScript has a ton of weird parts and baggage from the past because it wasn't originally built for building backends we can certainly use it to build great backends and I've done that many times but I still prefer Java or or C to JavaScript for building backends so don't overthink this pick a language and dedicate 2 months to learning it if you spend 3 to 5 hours every day studying and coding you can learn any of these languages in about 2 months now to help you on this journey I've created a free supplementary PDF that breaks down the specific Concepts you need to learn for each skill it also includes several project ideas to help you practice and apply what you have learned it's a great resource to review your progress find gaps in your knowledge and prepare for interviews you can find the link in the description Box by the way I have a bunch of tutorials on this channel and complete courses on my website if you're looking for structured learning again links are in the description box the next thing you need to learn is a version control system like git git is not a programming language it's a tool that we use to track changes to our code and collaborate with others git and GitHub which is a platform that hosts git repositories are essential for every developer git has a ton of features but you don't need to know them all for everyday use think of it like the 8020 rule 80% of the time you use 20% of gits features so one to two weeks of practice is enough to get up and running now building backends often involves working with data structures and implementing complex algorithms this is where a lot of self-taught programmers struggle because they try to skip ahead and learn more and more languages and tools without learning the fundamentals of computer science data structures and algorithms are critical subjects taught to computer science students and they're often covered in Tech interviews especially at Big tech companies like apple Google and Microsoft while you can skip this step and go to the next as someone who has had the privilege of teaching millions of people I highly recommend you not overlook this step otherwise you're going to feel the pain later in your career so spend 1 to two months studying classic computer science data structures and algorithms this will give you a strong foundation in programming and problem solving the next thing I'll recommend to learn which a lot of self-taught people Miss is design patterns design patterns are proven solutions to Common software design problems there are 23 classic design patterns that were documented in this classic book design patterns by the gang of four many of these patterns are used in web Frameworks particularly spring Django and as.net core which we will talk about in a few minutes so learning these design patterns will give you a deeper understanding of object-oriented design principles and how these Frameworks work under the hood now I got to tell you this book is pretty old and it's written in C++ honestly it's a difficult read because many of the examples in the book are dry and not quite relevant to Modern software that's why I've created a very handson and pragmatic course on this topic where I use Java and modern examples that you find in applications we use every day so you can see how these design patterns are used to solve problems in modern applications whether you want to take my course or a different resource I believe if you dedicate a few hours every day you can have a pretty solid understanding of design patterns in about 2 months the next thing you need to learn is understanding and designing databases there are two classes of database engines relational and non-relational also called No SQL databases in relational databases data is stored in tables with rows and columns that are related that's why we call them relational databases these databases are best for applications that require complex queries and transactions like banking systems and e-commerce applications especially any application that needs complex reporting examples of relational database engines are MySQL postgress SQL server and Oracle these are different products that despite some differences work more or less the same way with all these products we retrieve or store data using a language called SQL some people call it SQL which is short for structured query language it's a simple language that looks like plain English now you don't need to learn all these database engines because different projects and teams use different database engines when you're starting out you just need to learn one of them and you can easily pick up others on the job out of these I would recommend MySQL because it's the most popular database engine but you can pick any other database engine that you like one month is enough to learn the essence of SQL and working with a relational database now in no SQL databases data is stored without a predefined table structure so these databases are more flexible they're best for applications that require flexible data models and real-time analytics examples include mongod DB couch DB and Cassandra again these are several products out there and you don't have to learn all of them out of these I would recommend mongodb because it's the most popular and you can learn it in about a month you're not going to be an expert but you're going to have a decent practical knowledge the next thing you need to learn is a web framework which depends on your programming language for python you should learn Jango for Java you should learn spring boot for JavaScript you should learn express.js for C you should learn as. net core for Ruby you should learn Ruby on Rails and for go you should learn J all these Frameworks more or less do the same thing they provide a bunch of tools for building backends handling tasks like routing requests and response handling database interaction and Security in a nutshell with these Frameworks we can build and publish application programming interfaces or apis these apis are essentially communication points between front ends and backends allowing front ends to retrieve or post data to backends if you have a solid background in a programming language and databases you can learn any of these Frameworks in about 2 months so if you dedicate a few hours every day and follow this road map you'll have the necessary knowledge to apply for entrylevel backend Developer jobs in about 12 months now let's talk about the essential languages and Technologies you need for frontend development frontend development is built on Three core languages HTML CSS and JavaScript HTML or hypertext markup language is used for structuring web pages we can Define headings paragraphs images links and more it's quite simple and if you dedicate a few hours a day you can learn the basics in a week or two the next thing you need to learn is CSS or cascading stylesheets CSS is used for styling web pages it allows us to control colors fonts layouts and so on it helps create responsive designs that adapt to different screen sizes with a few hours of practice a day you can learn the essence of CSS in 2 to 4 weeks you won't be an expert but you'll have practical knowledge to apply in your projects as you work on different projects you will learn additional techniques along the way the next thing you need to learn is Javascript and this is where programming starts HTML and CSS are for structuring and styling pages but programming is about logic it's about algorithms and this is where JavaScript comes in with JavaScript we can make our web pages interactive we can handle user clicks validate form data show popups get data from the back end and basically bring our website to life now if you have never programmed before this might be the most challenging part of your journey because you have to learn how to think like a programmer it might feel weird at the beginning but with continuous study and consistent practice I'm sure you can get a reasonable grasp of it in about 2 months the next thing you need to learn is typescript it's a language that's built on top of JavaScript that adds static typing and additional features allowing us to write more robust code these days most companies prefer typescript for large scale applications so if you want to land a frontend developer job in 2024 and Beyond typescript is a must know it's relatively small compared to JavaScript and you can get up and running in about 2 to 3 weeks next on our list is a UI or user interface library or framework a UI framework is for building user interfaces using reusable components or building blocks examples include react angular View and so on react is the most popular and has a ton of job opportunities so if you're looking to land a frontend developer job react is your best bet now to learn react effectively you need to have a solid understanding of JavaScript and basic grasp of typescript because most react projects these days use typescript so make sure to build a strong foundation in JavaScript before diving into react otherwise you're going to face numerous challenges with a solid understanding of JavaScript you can get up and running with react in about 2 months then you can explore other options like angular or view to add to your resume focus on one framework at a time learn it properly do a few projects and once you have a solid understanding you can learn other Frameworks if you wish so that's the core of front and development these skills are listed on nearly every job description and with continuous learning and consistent practice you can learn them all in about 6 months but I got to be honest with you frontend development is competitive so to truly stand out there are additional skills you need to learn to increase your job opportunities so let's go over them one by one you learn that with CSS we can style web pages and make them beautiful now as our projects grow and get more complex styling Pages using plain CSS can become painful and messy so over time many solutions have been created to address this problem one of them is CSS pre-processors which allow us to write CSS in a more efficient syntax using additional features and then compile it down to plain CSS examples include SAS Les and stylus different projects use different tools and you don't need to learn all of these to apply for a front and developer job if you're familiar with one of them you can quickly learn others on the job out of these I would suggest SAS because it's the most popular and a good one to start with one to two weeks is enough to get up and running with SAS another approach to writing manageable CSS is using a CSS framework a CSS framework provides pre-written CSS that we can use in our applications some of the popular ones are bootstrap Tailwind Foundation skeleton and so on now as you can see here on npm Trends bootstrap used to be very popular and a lot of projects are still using it but over the past couple of years Tailwind has been emerging and overtaken bootstrap so a lot of newer projects particularly react projects use Tailwind so out of these I recommend learning Tailwind it's not that complicated and you can get a decent grasp of it in about 2 to 4 weeks another key skill that employeers are looking for especially in senior developers is automated testing with automated testing we can write code to test our code and make sure it functions correctly automated testing minimizes bugs and enhances the overall quality of our applications there are many testing Frameworks out there but the two most popular ones are just and V test which are pretty similar so once you learn one of them you can learn the other pretty quickly just is the most popular one but it has some baggage so newer projects often use vest again they're very similar and you can start with either of them I believe 3 to four weeks is enough to learn the essence of just and automated testing principles next on our list is meta Frameworks a meta framework is a higher level framework that sits on top of a core UI library or framework and enhances its cap abilities it's not something that all employers are looking for because it's only used in newer projects a lot of older projects don't use a meta framework but if you want to have a Competitive Edge if you're looking for a better position with a better salary I would recommend learning a meta framework for react applications we have nextjs which is the more popular option and remix I recommend learning nextjs which you can master in 4 to 6 weeks if you have a strong foundation in react so that really sums up the essential schem deals you need to become a frontend developer if you have any questions please let me know in the comments below and I will do my best to answer you right here or in my future videos if you enjoy this video please give it a like And subscribe for more useful content,True
7IgVGSaQPaw,The Complete Machine Learning Roadmap,"Go from zero to a machine learning engineer in 12 months. This step-by-step roadmap covers the essential skills you must learn to become a machine learning engineer in 2024. 

‚ù§Ô∏è Join this channel to get access to perks:
https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join

Download the FREE roadmap PDF here: https://mosh.link/machine-learning-roadmap

‚úã Stay connected

- Complete courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üîó Other roadmaps

https://youtu.be/Tef1e9FiSR0?si=QpVnZ_o9-DAXzT71
https://youtu.be/OeEHJgzqS1k?si=qd0ZIqAzUpZQn6BX

üìö Tutorials 

https://youtu.be/_uQrJ0TkZlc?si=ZhlCrQs1SkaPNVa8
https://youtu.be/8JJ101D3knE?si=OGTuS35LQqSunuhh
https://youtu.be/BBpAmxU_NQo?si=dm-ZCPxVBYWS1Qhn
https://youtu.be/7S_tz1z_5bA?si=QL7s_M2Ao90RDwG8

üìñ Chapters

00:00 - Introduction
00:20 - Programming Languages
00:42 - Version Control
01:03 - Data Structures & Algorithms 
01:35 - SQL
01:55 - The Complete Roadmap PDF
02:19 - Mathematics & Statistics
02:40 - Data Handling 
03:15 - Machine Learning Fundamentals
03:57 - Advanced Topics 
04:28 - Model Deployment

#machinelearning #ai #datascience #coding #programming",2024-07-18T13:00:06Z,"machine learning roadmap, machine learning, ml roadmap, ml career path, complete machine learning roadmap, machine learning python, roadmap for machine learning, code with mosh, programming with mosh, mosh hamedani, programming, coding, machine learning engineer, ai engineer roadmap, data science, tech career",27.0,en,en,https://i.ytimg.com/vi/7IgVGSaQPaw/default.jpg,PT5M25S,796090.0,22899.0,727.0,public,if you want to become a machine learning engineer there are nine essential skills you need to master let's go over them one by one now machine learning involves creating models that learn from data to make predictions or decisions as a machine learning engineer you'll need to master various skills from programming and math to deploying models first up you need to get proficient with python it's the primary language used in machine learning it's pretty simple and you can get a decent grasp of it in about a month or two now some jobs might ask for other languages like Java r or C++ for performance reasons but as a beginner just stick to python don't overwhelm Yourself by trying to learn everything at once focus on mastering python first the next thing you need to learn is a version control system like git git is not a programming language it's a tool we use to track changes to our code and collaborate with others git has a ton of features but you don't need to learn all of them think of it like the 8020 rule 80% of the time you use 20% of GS features so one to two weeks of practice is enough to get up and running next you need to dive into data structures and algorithms I know a lot of self-taught Engineers skip this step but trust me it's super important first off understanding these Concepts will really boost your problem solving skills which is key for tackling complex challenges plus big tech companies like Google Amazon and Facebook love to ask about data structures and algorithms in job interviews also using the right data structures helps you manage large data sets efficiently and keeps your algorithms running smoothly so spend about a month or two on this and you'll be in a great shape next you need to get comfortable with SQL SQL stands for structured query language it's a very simple language we use for working with databases as a machine learning engineer you should know how to use SQL to access and organize the data you need for your models SQL is pretty simple and you can get a decent grasp of it in about a month or two now by the way to help you on this journey I've created a free supplementary PDF that breaks down the specific Concepts you need to learn for each skill it's a great resource to review your progress find gaps in your knowledge and prepare for interviews you can find the link in the description box also I have a bunch of tutorials on this channel and complete courses on my website if you're looking for a structured learning again links are in the description box the next thing you need is a solid foundation in mathematics and statistics this is crucial because machine learning algorithms are built on these principles focus on linear algebra calculus probability and statistics these will help you understand how machine learning algorithms work and how to optimize them spend about 2 to 3 months to master these topics after that you need to get good at preparing and visualizing data for your models this means cleaning up the data and organizing it in a way that makes it easy for your model to understand you'll need to learn how to use tools like pandas and numpy to manipulate and clean the data once your data is clean you need to visualize it to understand patterns and communicate results python libraries like matplot lip and Seaborn will help you create insightful visualizations to identify Trends and anomalies if you have a solid background in Python and SQL you can get a good grasp of data pre-processing and visualization in a month or two now let's talk about machine learning fundamentals machine learning algorithms fall into two categories supervised and unsupervised in supervised learning the model learns from labeled data meaning each input comes with a known output in unsupervised Lear learning the model works with unlabeled data and tries to figure out patterns and relationships on its own it's important to learn about these types of algorithms and how they work you'll also need to get familiar with tools like tensor flow pie torch and pyed learn these are the essential tools used to build and train machine learning models dedicate about 3 to four months to master the core machine learning Concepts and how to use these tools effectively once you have a good understanding of the basics it's time to dive into more advanced machine learning Concepts this includes techniques like Ensemble learning which combines multiple models to improve performance and deep learning which involves neural networks with many layers you'll also need to learn about natural language processing or NLP for working with Text data and computer vision for working with images these Advanced topics will help you tackle more complex problems and build more sophisticated models spend about 2 to 3 months on these advanced concepts to deepen your Knowledge and Skills finally you need to know how to put the models you build into action this means learning how to create simple web services that let other applications use your models you can do this by learning python Frameworks like flask or Django you should also learn about Docker which is a tool that makes it easy to package your model and all its dependencies so it runs smoothly on any machine think of it like packing everything your model needs into a box so it works anywhere you take it spend one to two months mastering these Basics so you can confidently deploy your models and make them available for real word use so if you dedicate 3 to 5 hours every day you can follow this road map and pick up all the skills you need to apply for entrylevel machine learning jobs in about 12 to 20 months if you have any questions please let me know in the comments below I'll do my best to answer you right here or in my future videos if you enjoy this video please give it a like And subscribe for more useful content,True
3ZEMvvDFEdA,Become a Mobile Developer in 12 Months! üöÄ,#mobileappdevelopment  #webdevelopment  #coding #codewithmosh,2024-07-11T13:00:07Z,"mobile development roadmap, ios developer, android developer, mobile development, coding, programming, app development roadmap, react native, flutter, code with mosh, programming with mosh, mosh hamedani",27.0,en,en,https://i.ytimg.com/vi/3ZEMvvDFEdA/default.jpg,PT55S,19269.0,959.0,21.0,public,to become a mobile app developer there are five essential skills let's go over them one by one there are basically two ways to build mobile apps native or crossplatform with Native development we can build an app that runs only on a particular platform like iOS or Android this approach gives us full control over the capabilities of the target platform resulting in great performance and the best user experience however the downside is that if you want to build the same app for a different platform you have to create a separate project in an entirely different language and ecosystem this means two separate projects and two sets of bugs to fix that's where crossplatform or multiplatform development comes to the rescue with crossplatform development we can reduce development Time by reusing the same code for different platforms and potentially reduce bugs fixing a bug once means it's fixed across multiple platforms check out my full video link in the description,True
yye7rSsiV6k,The Complete App Development Roadmap,"Go from zero to a mobile app developer in 12 months. This step-by-step roadmap covers the essential skills and latest technologies to become an app developer. 

‚ù§Ô∏è Join this channel to get access to perks:
https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join

Download the FREE roadmap PDF here: https://mosh.link/mobile-roadmap

‚úã Stay connected

- Complete courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üîó Other roadmaps

https://youtu.be/Tef1e9FiSR0?si=QpVnZ_o9-DAXzT71
https://youtu.be/OeEHJgzqS1k?si=qd0ZIqAzUpZQn6BX

üìö Tutorials 

https://youtu.be/W6NZfCO5SIk?si=yS0lQXyy3qwQF3DA
https://youtu.be/8JJ101D3knE?si=OGTuS35LQqSunuhh
https://youtu.be/BBpAmxU_NQo?si=dm-ZCPxVBYWS1Qhn
https://youtu.be/NU_1StN5Tkk?si=gsMONPdgxouQOolu
https://youtu.be/SqcY0GlETPk?si=O93IXejTVuh_5cbY
https://youtu.be/0-S5a0eXPoc?si=yP7qia07NN2FMeS2


üìñ Chapters

00:00 - Introduction
00:08 - Native vs Cross-platform Development
04:08 - Languages
04:57 - Version control (Git)
05:25 - Data structures & algorithms 
06:12 - Design patterns 
07:14 - Mobile frameworks

#appdevelopment #coding #programming",2024-07-04T13:01:03Z,"app development roadmap, app development, react native, flutter, android app development, ios app development, programming, programming with mosh, code with mosh, mosh hamedani, how to make an app, coding, flutter app development, mobile development, should i use flutter",27.0,en,en,https://i.ytimg.com/vi/yye7rSsiV6k/default.jpg,PT7M52S,1166978.0,27369.0,692.0,public,to become a mobile app developer there are five essential skills let's go over them one by one there are basically two ways to build mobile apps native or crossplatform with Native development we can build an app that runs only on a particular platform like iOS or Android this approach gives us full control over the capabilities of the target platform resulting in great performance and the best user experience however the downside is that if you want to build the same app for a different platform form we have to create a separate project in an entirely different language and ecosystem this means two separate projects and two sets of bugs to fix that's where crossplatform or multiplatform development comes to the rescue with crossplatform development we can reduce development Time by reusing the same code for different platforms and potentially reduce bugs fixing a bug once means it's fixed across multiple platforms now for Native development we have a few options for iOS we can use Objective C which is an older language or Swift which is modern and preferred for Android we can use Java which is a traditional language or cotland which is modern and preferred for crossplatform development the option depends on the framework or toolkit we use there are several crossplatform toolkits like react native flutter cotland multiplatform Maui and a few others let's dive into each one first off we have react native which was released by Facebook in 2015 this toolkit lets you build mobile apps using JavaScript and and react which is a popular library for building web user interfaces some big names using react native include Microsoft Office scype and even Facebook itself then we have flut which is a Google product that came out in 2017 flut uses a programming language called Dart which takes the best parts of JavaScript Java and C some examples of apps built with flutter are eBay Alibaba and Google pay it's really powerful and gaining a lot of traction now let's talk about cotland multiplatform this is the newest player released by jetbrains the same company behind tools like intellig pycharm and webstorm in my opinion the best idees in the world it uses the cotlin programming language which is a modern language inspired by Java apps like McDonald's Netflix and cash app are built with cotton multiplatform finally we have Maui which stands for net multiplatform appui introduced by Microsoft Maui allows you to build native mobile and desktop apps using C and . net these days most companies prefer to use multiplatform development to reduce their costs this means we can rule out native development for now and focus on cross-platform options now which framework is the best well there is no such a thing as the best framework yes there are people out there like our Superstar highly opinionated developer Mr John Smith who swears by react native but there are others with a different opinion the reality is that neither of these Frameworks is perfect each has its own problems and quirks that you you will discover once you start building real applications Beyond YouTube tutorials and the reason for that is that they try to support two entirely different platforms at the same time so which crossplatform solution should you choose well it depends on two things first on what languages and Technologies you're familiar with for example if you're a c developer Maui might be the easier route if you know web Technologies like JavaScript and react you might want to go for react native it's an easier transition from web to mobile development the other factor is job opportunities there are often more jobs available for react native and flutter here you can see the number of open positions for different types of mobile app developers in the US now this is the current situation here and maybe different where you live maybe there are more job opportunities for a flutter developer so I recommend doing your own research rather than taking my or someone else's advice about which route to choose but realistically if you're looking for a career in Mobile development you would have to choose between react native and flutter if you have basic web development skills react native is a better route otherwise I would recommend flutter because Dart which is the programming language that flutter uses is a nicer language to work with than JavaScript it's more modern and doesn't have the quirks and weird Parts you find in JavaScript so decide between JavaScript or Dart and commit to a study plan I believe if you dedicate 3 to 5 hours every day you can learn the essence of either of these languages in about 2 months to help you on this journey I've created a free supplementary PDF that breaks down the specific Concepts you need to learn for each skill it also includes several project ideas to help you practice and apply what you have learned it's a great resource to review your progress find gaps in your knowledge and prepare for interviews you can find the link in the description Box by the way I have a bunch of tutorials on this channel and complete courses on my website if you're looking for structur learning again links are in the description box the next thing you need to learn is a Version Control System them like git git is not a programming language it's a tool we use to track changes to our code and collaborate with others git and GitHub which is a platform that hosts git repositories are essential for every developer now git has a ton of features but you don't need to know them all for everyday use think of it like the 8020 rule 80% of the time you use 20% of git's features 1 to two weeks of practice is enough to get up and running now building mobile apps often involves working with data structures and implementing complex algorithms this is where a lot of self-taught programmers struggle because they try to skip ahead and learn more and more languages and tools without learning the fundamentals of computer science data structures and algorithms are critical subjects taught to computer science students and they're often covered in Tech interviews especially at big companies like apple Google and Microsoft while you can skip this step and go to the next as someone who has had the privilege of teaching millions of people I highly recommend you not to overlook this step otherwise you're going to feel the pain later in your career so spend 1 to 2 months studying classic data structures and algorithms this will give you a strong foundation in programming and problem solving the next thing I would recommend learning which again a lot of self-taught developers Miss is design patterns design patterns are proven solutions to Common software design problems there are 23 classic design patterns documented in the book design patterns by the gang of four many of these patterns are used in Mobile Frameworks so learning them will give you a deeper understanding of object-oriented design principles and how these mobile Frameworks work under the hood now I have to tell you this book is pretty old and written in C++ honestly it's a difficult read because many of the examples in the book are dry and not quite relevant to Modern software that's why I've created a very Hands-On and pragmatic course on this topic where I use Java and modern examples found in applications we use every day you can see how design patterns are used to solve problems in modern applications whether you want to take my course or use a different resource I believe if you dedicate a few hours every day you can have a pretty solid understanding of design patterns in about 2 months all right the next thing you need to learn is a mobile framework which we talked about before for Dart you should learn flutter and for JavaScript you should learn react native assuming you have a solid background in programming you can learn either of these Frameworks in about 2 months so if you dedicated a few hours every day and follow this road map you'll have the necessary knowledge to apply for an entry-level mobile developer job in about 8 to 12 months if you have any questions please let me know in the comments below I'll do my best to answer you right here or in my future videos If you enjoyed this video please give it a like And subscribe for more useful content,True
IQDA39A44AA,Become a Back-end Developer in 12 Months! üöÄ,#backend #webdevelopment  #coding #codewithmosh,2024-06-19T13:00:24Z,"backend developer roadmap, how to become backend developer, web development roadmap, coding, programming, backend web development, web development, backend, learn to code, code with mosh, programming with mosh, mosh hamedani, backend developer, backend roadmap, software engineering, roadmap",27.0,en,en,https://i.ytimg.com/vi/IQDA39A44AA/default.jpg,PT59S,28005.0,1515.0,18.0,public,to become a backend developer there are five essential skills let's go over them one by one the first step to learning backend development is to pick up a programming language here we have a few options like JavaScript python Ruby Java CP and go just to name a few now which one is the best well it's almost impossible to pick one language as the best or the ultimate language because the choice of language depends on various factors like project requirements team expertise and performance needs for example JavaScript is used for full stack development because we can use it on both the front end and the back end in contrast Python and Ruby are often used for rapid prototyping and fast development Cycles Java and C are often used in building large scale Enterprise grade applications they're heavily used in large organizations and government systems and go is used for performance critical and concurrent applications check out my full video link in the description,True
CxLdTIIMXuM,Become a Frontend Developer in 12 Months! üöÄ,#frontend #webdevelopment  #coding #codewithmosh,2024-06-12T13:00:21Z,"frontend developer roadmap, how to become front end developer, web development roadmap, coding, programming, software engineering, front end web development, javascript, web development, frontend, learn to code, code with mosh, programming with mosh, mosh hamedani",27.0,en,en,https://i.ytimg.com/vi/CxLdTIIMXuM/default.jpg,PT52S,36408.0,1581.0,17.0,public,in this video I'm going to lay out a complete road map of the essential skills you need to become a frontend developer whether you're a beginner wanting to know what to learn to land a frontend developer job or someone with some experience looking to level up your skills and filling the gaps this video is for you we'll cover what each skill is why it's important and a realistic timeline for learning it ready let's dive in web development is generally broken down into two areas front end development and backend development and then full stack development which is a combination of both front and development is all about what the user sees and interacts with it's the website in your browser or the app on your mobile phone or tablet backend development handles everything behind the scenes like data processing storage and logic in this video our focus is only on frontend development check out my full video link in the description,True
OeEHJgzqS1k,The Complete Backend Developer Roadmap,"Go from zero to a backend developer in 12 months. This step-by-step roadmap covers the essential skills and latest technologies to become a backend developer in 2024. 

‚ù§Ô∏è Join this channel to get access to perks:
https://www.youtube.com/channel/UCWv7vMbMWH4-V0ZXdmDpPBA/join

Download the FREE roadmap PDF here: https://mosh.link/backend-roadmap

‚úã Stay connected

- Complete courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üîó Other roadmaps

https://youtu.be/Tef1e9FiSR0?si=QpVnZ_o9-DAXzT71
https://youtu.be/yye7rSsiV6k?si=4ZIpjrqeU0fJk7os

üìö Tutorials 

https://youtu.be/_uQrJ0TkZlc?si=QA5qvbvk60uP-7Gu
https://youtu.be/eIrMbAQSU34?si=PmdmS1vo9Gp4yRxR
https://youtu.be/8JJ101D3knE?si=OGTuS35LQqSunuhh
https://youtu.be/BBpAmxU_NQo?si=dm-ZCPxVBYWS1Qhn
https://youtu.be/NU_1StN5Tkk?si=gsMONPdgxouQOolu
https://youtu.be/7S_tz1z_5bA?si=wUNE0zrN_6uWrO7d
https://youtu.be/rHux0gMZ3Eg?si=w1h0R4U8freF5xPT


üìñ Chapters

00:00 - Introduction
00:08 - Programming languages 
02:48 - Version control (Git)
03:16 - Data structures & algorithms 
04:03 - Design patterns 
05:10 - Databases
07:00 - Web frameworks
08:02 - Additional skills 

#programming #webdevelopment #backend #coding",2024-06-11T13:00:30Z,"backend developer roadmap, how to become backend developer, web development roadmap, coding, programming, backend web development, web development, backend, learn to code, code with mosh, programming with mosh, mosh hamedani, backend developer, backend roadmap, software engineering, roadmap, tech career, backend skills, backend career, web development path, software roadmap, tech roadmap, web development essentials, backend essentials",27.0,en,en,https://i.ytimg.com/vi/OeEHJgzqS1k/default.jpg,PT8M24S,625288.0,17760.0,530.0,public,to become a backend developer there are five essential skills let's go over them one by one the first step to learning backend development is to pick up a programming language here we have a few options like JavaScript python Ruby Java C and go just to name a few now which one is the best well it's almost impossible to pick one language as the best or the ultimate language because the choice of language depends on various factors like project requirements team expertise and performance needs for example JavaScript is used for full stack development because we can use it on both the front end and the back end in contrast Python and Ruby are often used for rapid prototyping and fast development Cycles Java and C are often used in building large scale Enterprise grade applications they're heavily used in large organizations and government systems and go is used for performance critical and concurrent applications now a common mistake I see among my students is that they try to learn learn many of these languages hoping that this would increase their job opportunities but it doesn't work that way because learning a language is only the first step you also need to learn the ecosystem of tools and libraries for that language to land a job so if you're starting out just stick to one language whichever you like but also do a bit of research and see how many job opportunities are available for that language where you live generally speaking there are often more job opportunities for python Java and JavaScript but again I want want you to do your own research now assuming that there are more job opportunities for these three languages in your town and you're not sure what language to start with I would recommend python because it's the easiest and has a simple readable syntax that's great for beginners my second choice is Java because it's a solid language and is often taught to computer science and software engineering students JavaScript has a ton of weird parts and baggage from the past because it wasn't originally built for building backends we can certainly use it to build great backends and I've done that many times but I still prefer Java or C to JavaScript for building backends so don't overthink this pick a language and dedicate 2 months to learning it if you spend 3 to 5 hours every day studying and coding you can learn any of these languages in about 2 months now to help you on this journey I've created a free supplementary PDF that breaks down the specific Concepts you need to learn for each skill it also includes several project ideas to help you practice and apply what you have learned it's a great resource to review your progress find gaps in your knowledge and prepare for interviews you can find the link in the description Box by the way I have a bunch of tutorials on this channel and complete courses on my website if you're looking for structured learning again links are in the description box the next thing you need to learn is a version control system like git git is not a programming language it's a tool that we use to track changes to our code and collaborate with others git and GitHub which is a platform that hosts git repositories are essential for every developer git has a ton of features but you don't need to know them all for everyday use think of it like the 8020 rule 80% of the time you use 20% of gits features so 1 to two weeks of practice is enough to get up and running now building backends often involves working with data structures and implementing complex algorithms this is where a lot of self-taught programmers struggle because they try to skip ahead and learn more and more languages and tools without learning the fun alss of computer science data structures and algorithms are critical subjects taught to computer science students and they're often covered in Tech interviews especially at Big tech companies like apple Google and Microsoft while you can skip this step and go to the next as someone who has had the privilege of teaching millions of people I highly recommend you not overlook this step otherwise you're going to feel the pain later in your career so spend 1 to two months studying classic computer science data structures and algorithms this will give you a strong foundation in programming and problem solving the next thing I would recommend to learn which a lot of self-taught people Miss is design patterns design patterns are proven solutions to Common software design problems there are 23 classic design patterns that were documented in this classic book design patterns by the gang of four many of these patterns are used in web Frameworks particularly springing Django and as.net core which we'll talk about in a few minutes so learning these design patterns will give you a deeper understanding of objectoriented design principles and how these Frameworks work under the hood now I got to tell you this book is pretty old and it's written in C++ honestly it's a difficult read because many of the examples in the book are dry and not quite relevant to Modern software that's why I've created a very Hands-On and pragmatic course on this topic where I use Java and modern examples that you find in applications we use every day so you can see how these design patterns are used to solve problem problems in modern applications whether you want to take my course or a different resource I believe if you dedicate a few hours every day you can have a pretty solid understanding of design patterns in about 2 months the next thing you need to learn is understanding and designing databases there are two classes of database engines relational and non-relational also called nosql databases in relational databases data is stored in tables with rows and columns that are related that's why we call them relational databases these databases are best for applications that require complex queries and transactions like banking systems and e-commerce applications especially any application that needs complex reporting examples of relational database engines are MySQL postgress SQL server and Oracle these are different products that despite some differences work more or less the same way with all these products you retrieve or store data using a language called SQL some people call it SQL which is short for structured query language it's a simple language that looks like plain English now you don't need to learn all these database engines because different projects and teams use different database engines when you're starting out you just need to learn one of them and you can easily pick up others on the job out of these I would recommend MySQL because it's the most popular database engine but you can pick any other database engine that you like one month is enough to learn the essence of SQL and working with a relational database now in no SQL databases data is stored without a predefined table structure so these databases are more flexible they're best for applications that require flexible data models and real-time analytics examples include mongodb couch DB and Cassandra again these are several products out there and you don't have to learn all of them out of these I would recommend mongodb because it's the most popular and you can learn it in about a month you're not going to be an expert but you're going to have a decent practical knowledge the next thing you need to learn is a web framework which depends on your programming language for python you should learn D Jango for Java you should learn spring boot for JavaScript you should learn express.js for C you should learn as.net core for Ruby you should learn Ruby on Rails and for go you should learn J all these Frameworks more or less do the same thing they provide a bunch of tools for building backends handling tasks like routing request and response handling database interaction and Security in a nutshell with these Frameworks we can build and publish application programming interfaces or apis these apis are essentially communication points between front-ends and backends allowing frontends to retrieve or post data to backends if you have a solid background in a programming language and databases you can learn any of these Frameworks in about 2 months so if you dedicate a few hours every day and follow this road map you'll have the necessary knowledge to apply for entry level backend Developer jobs in about 12 months now if you want to take your skills to the next level there are of course additional things you should learn I've included them in the PDF I mentioned earlier again the link is in the description if you have any questions please let me know in the comments below and I'll do my best to answer you right here or in my future videos If you enjoyed this video please give it a like And subscribe for more useful content,True
Tef1e9FiSR0,The Complete Frontend Developer Roadmap,"Go from zero to a frontend developer in 12 months. This step-by-step roadmap covers the essential skills and latest technologies to become a frontend developer in 2024. 

Download the FREE roadmap PDF here: https://mosh.link/frontend-roadmap

‚úã Stay connected

- Complete courses: https://codewithmosh.com
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üîó Other roadmaps

https://youtu.be/OeEHJgzqS1k?si=aR1w8WMfdDQxx3wE
https://youtu.be/yye7rSsiV6k?si=4ZIpjrqeU0fJk7os

üìö Tutorials 

https://youtu.be/qz0aGYrrlhU?si=8d3Q5kiE83nMJZAG
https://youtu.be/W6NZfCO5SIk?si=WXcgkjHSsGFyXZC2
https://youtu.be/d56mG7DezGs?si=Bng_nVPU7VQrxaa7
https://youtu.be/8JJ101D3knE?si=OGTuS35LQqSunuhh
https://youtu.be/SqcY0GlETPk?si=hbktR9plzOgfuvpZ
https://youtu.be/ZVnjOPwW4ZA?si=VG6XInWdFW8d0Sog
https://youtu.be/zuKbR4Q428o?si=U_e5ITtUGFptQoqw
https://youtu.be/0-S5a0eXPoc?si=1l1qX0YwbQN7BEuo

üìñ Chapters

00:00 - Introduction
00:23 - Basics of web development
00:56 - How long it takes to become a front-end developer
01:10 - The complete front-end roadmap (PDF)
01:33 - Basics of front-end development 
03:33 - Version control (Git)
03:53 - TypeScript 
04:18 - UI libraries/frameworks
05:41 - CSS preprocessors
06:22 - CSS frameworks 
07:01 - Automated testing frameworks
07:43 - Meta-frameworks
08:20 - Mobile development 

#programming #webdevelopment #frontend #coding",2024-05-28T13:00:06Z,"frontend developer roadmap, how to become front end developer, web development roadmap, coding, programming, software engineering, front end web development, javascript, web development, frontend, learn to code, code with mosh, programming with mosh, mosh hamedani, frontend roadmap, tech career, software developer",27.0,en,en,https://i.ytimg.com/vi/Tef1e9FiSR0/default.jpg,PT8M54S,518169.0,17475.0,512.0,public,in this video I'm going to lay out a complete road map of the essential skills you need to become a frontend developer whether you're a beginner wanting to know what to learn to land a frontend developer job or someone with some experience looking to level up your skills and filling the gaps this video is for you we'll cover what each skill is why it's important and a realistic timeline for learning it ready let's dive in web development is generally broken down into two areas front end development and backend development and then full stack development which is a combination of both front end development is all about what the user sees and interacts with it's the website in your browser or the app on your mobile phone or tablet backend development handles everything behind the scenes like data processing storage and logic in this video our focus is only on frontend development I'm planning to create a similar video on backend development so check the description box for the link now before we get started let's answer a common question how long does it take to become a front-end developer well the answer varies for everyone but it can take anywhere from 6 to 12 months of consistent studying and practice the key here is consistency and continuous learning to help you on this journey I've created a free supplementary PDF that breaks down the specific Concepts you need to learn for each skill it also includes several project ideas to help you practice and apply what you have learned it's a great resource to review your progress find gaps in your knowledge and prepare for interviews you can find the link in the description box now let's talk about about the essential languages and Technologies you need to learn front and development is built on Three core languages HTML CSS and JavaScript HTML or hypertext markup language is used for structuring web pages we can Define headings paragraphs images links and more it's quite simple and if you dedicate a few hours a day you can learn the basics in a week or two by the way I have a bunch of tutorials on this channel and complete courses on my website if you're looking for structured Learning Links are in the description box then next thing you need to learn is CSS or cascading stylesheets CSS is used for styling web pages it allows us to control colors fonts layouts and so on it helps create responsive designs that adapt to different screen sizes with a few hours of practice a day you can learn the essence of CSS in 2 to 4 weeks you won't be an expert but you'll have practical knowledge to apply in your projects as you work on different projects you will learn additional techniques along the way the next thing you need to learn is Javascript and this is is where programming starts HTML and CSS are for structuring and styling pages but programming is about logic it's about algorithms and this is where JavaScript comes in with JavaScript we can make our web pages interactive we can handle user clicks validate form data show popups get data from the back end and basically bring our website to life now if you have never programmed before this might be the most challenging part of your journey because you have to learn how to think like a programmer it might feel weird at the beginning but with Contin study and consistent practice I'm sure you can get a reasonable grasp of it in about 2 months again I have a bunch of tutorials on this channel and complete courses on my website if you prefer structured Learning Links are in the description box now as we code we need a way to track changes and collaborate with others that's where Version Control Systems particularly git come into play git isn't a programming language it's a tool that allows us to track changes to our code and revert to previous versions GitHub on the other hand is one of the many platforms that hosts G repositories enabling us to share our code with others and work in a team environment both skid and GitHub are essential for every developer G has a ton of features but you don't need to know them all for everyday use think of it like the 8020 rule 80% of the time you use 20% of gits features one to two weeks of practice is enough to get up and running the next thing you need to learn is typescript it's a language that's built on top of JavaScript that adds static typing and additional feature allowing us to write more robust code these days most companies prefer typescript for large scale applications so if you want to land a front and developer job in 2024 and Beyond typescript is a must know it's relatively small compared to JavaScript and you can get up and running in about 2 to 3 weeks next on our list is a UI or user interface library or framework a UI framework is for building user interfaces using reusable components or building blocks examples incl include react angular View and so on react is the most popular and has a ton of job opportunities so if you're looking to land a front and developer job react is your best bet now to learn react effectively you need to have a solid understanding of JavaScript and basic grasp of typescript because most react projects these days use typescript so make sure to build a strong foundation in JavaScript before diving into react otherwise you're going to face numerous challenges with a solid understanding of JavaScript you can get up and running with react in about 2 months then you can explore other options like angular or view to add to your resume focus on one framework at a time learn it properly do a few projects and once you have a solid understanding you can learn other Frameworks if you wish so that's the core of front and development these skills are listed on nearly every job description and with continuous learning and consistent practice you can learn them all in about 6 months but I'm going to be honest with you front and development is competitive so to truly stand out there are additional skills you need to learn to increase your job opportunities so let's go over them one by one you learn that with CSS we can style web pages and make them beautiful now as our projects grow and get more complex styling Pages using plain CSS can become painful and messy so over time many solutions have been created to address this problem one of them is CSS pre-processors which allow us to write CSS in a more efficient syntax using additional features and then compile it down to plain CSS examples include SAS Les and stylus different projects use different tools and you don't need to learn all of these to apply for a frontend developer job if you're familiar with one of them you can quickly learn others on the job out of these I would suggest SAS because it's the most popular and a good one to start with one to two weeks is enough to get up and running with SAS another approach to writing manageable CSS is using a CSS framework a CSS framework provides pre-written CSS that we can use in our applications some of the popular ones are bootstrap Tailwind Foundation skeleton and so on now as you can see here on npm Trends bootstrap used to be very popular and a lot of projects are still using it but over the past couple of years Tailwind has been emerging and overtaking bootstrap so a lot of newer projects particularly react projects use Tailwind so out of these I recommend learning Tailwind it's not that complicated and you can get a decent grasp of it in about two to 4 weeks another key skill that employers are looking for especially in senior developers is automated testing with automated testing we can write code to test our code and make sure it functions correctly automated testing minimizes bugs and enhances the overall quality of our applications there are many testing Frameworks out there but the two most popular ones are just and vest which are pretty similar so once you learn one of them you can learn the other pretty quickly just is the most popular one but but it has some baggage so newer projects often use vest again they're very similar and you can start with either of them I believe 3 to four weeks is enough to learn the essence of just and automated testing principles next on our list is meta Frameworks a meta framework is a higher level framework that sits on top of a core UI library or framework and enhances its capabilities it's not something that all employers are looking for because it's only used in newer projects a lot of older projects don't use a meta framework but if you want to have a Competitive Edge if you're looking for a better position with a better salary I would recommend learning a meta framework for react applications we have nextjs which is the more popular option and remix I recommend learning nextjs which you can master in four to 6 weeks if you have a strong foundation in react now if you want to get into Mobile development and further increase your job opportunities learn react native it's a framework for building crossplatform mobile apps using react if you have a solid understanding of React 2 months is enough to get a good grasp of react native so that really sums up the essential skills you need to become a frontend developer if you have any questions please let me know in the comments below and I will do my best to answer you right here or in my future videos If you enjoyed this video please give it a like And subscribe for more useful content,True
J-graiyPhpw,9 Reasons People Hate JavaScript,"Why does everyone HATE JavaScript? We expose its flaws, quirks, and why it's still the king of the web!

‚úã Stay connected

- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üìñ What's covered

00:00 - Introducing JavaScript
00:14 - History of JavaScript
00:32 - Coercion 
00:59 - Equality operators
01:29 - Array.sort
01:50 - Null and undefined
02:08 - The this keyword
02:23 - Classes 
02:38 - Module system
03:16 - TypeScript
03:47 - Ecosystem
04:28 - Why JavaScript is the king

#javascript #programming #webdevelopment  #coding",2024-05-17T13:00:17Z,"javascript, javascript for beginners, learn javascript, web development, javascript crash course, programming with mosh, code with mosh, mosh hamedani, javascript tutorial, learn javascript for beginners, javascript basics, javascript programming, programming tutorial, js tutorial, javascript lesson, javascript 2024, front end, programming, coding, javascript important parts, javascript essentials, javascript summary",27.0,en,en,https://i.ytimg.com/vi/J-graiyPhpw/default.jpg,PT4M45S,121926.0,3963.0,357.0,public,"JavaScript the most popular programming language in the world and also one of the most hated languages but why why is there so much JavaScript hate let's be honest JavaScript has baggage it was created in 1995 by this dude in just 10 days as a tiny scripting language to add a bit of interactivity to web pages it wasn't meant for the massive complex apps we built today so naturally it's got some weird behaviors that can make everyone even coding Pros confused for example JavaScript automatically converts values from one type to another in operations that involve different types this is supposed to make JavaScript flexible but it can lead to some confusing unpredictable results for example if you add two empty arrays we get an empty string if we add an empty array to an empty object we get the string object object but if you swap the order of operants we get zero and if you add two empty objects we get not a number in JavaScript we have two operators for comparing values loose equality or double equals and strict equality or triple equals if you accidentally don't type that extra equal sign you're in for a surprise here's another funny example with double equals number zero equals the string zero now number zero also equals an empty array so if number zero equals empty string and an empty array we should assume that a string zero equals an empty array right nope they're not equal here's another funny one let's say we have an array of numbers like 1 100,000 21 30 and 4 if we use array. sort to sort this array we get the same result why because by default the sort method sorts elements as if they were strings to have JavaScript sort numbers correctly we need to provide a compare function to the sort method the other issue is that JavaScript has two special values for representing no values null and undefined a lot of people especially beginners don't know the difference but they are not the same thing undefined means a variable has no value assigned but null means the value is intentionally empty another problem is that this keyword which is supposed to refer to the object that it belongs to but it can have different values depending on where it's used and how the this keyword shifts and morphs confusing developers as it changes context now JavaScript pretends to have classes but it doesn't JavaScript classes are just syntactic sugar over Constructor functions JavaScript uses prototypical inheritance which is different from the classical inheritance model we have in languages like Java or C the other big problem is the module system in JavaScript JavaScript was not initially designed for large scale applications so it didn't have a native module system like languages like C Java or python so over time people came up with various module systems like commonjs AMD UMD and finally the official OS script modules the problem problem is each of these module systems have their own syntax and conventions and a lot of older projects still use the older systems this means we have to translate between module systems using tools like webpack or B which adds another layer of complexity now typescript was created to address these issues it's a super set of JavaScript that adds static typing and other features it can help catch errors and make large projects more manageable but it's a whole other language you got to learn on top of JavaScript plus there is an extra build step involved because we have to compile our typescript code into regular JavaScript code so browsers can understand it that's why some folks find typescript adding an extra layer of complexity to their projects so they have been moving away from it the other problem with JavaScript is it's chaotic ecosystem of packages libraries Frameworks and even meta Frameworks every day you see a new medium or Twitter post about a new JavaScript tool or framework that can do something twice faster while complicating the project tfold Junior devs jump up and down on how amazing it is while the project gets more entangled in yet another blackbox JavaScript tool the problem is by the time you learn a new framework it's already outdated and replaced by something newer and shinier that's why folks from other backgrounds sometimes get the impression that JavaScript devs spend more time chasing the shiny new tools than practicing core coding principles and best practices now on a positive note JavaScript runs everywhere it's the language of web but also runs on servers tons of jobs require JavaScript so even with all the quirks it's a language that pays the bills if you enjoyed this video give it a like And subscribe for more videos like this",True
3WphgC4wq0I,Stop Wasting Time on the Wrong Languages,#coding #programming,2024-05-10T13:00:03Z,"web development, computer science, how to become a software engineer, coding, programming, programming with mosh, code with mosh, mosh hamedani, get a job",27.0,en,en,https://i.ytimg.com/vi/3WphgC4wq0I/default.jpg,PT57S,22144.0,1314.0,31.0,public,I see a lot of my students try to learn many unrelated programming languages at the same time they learn a bit of C++ while learning JavaScript and python look each of these languages has certain strengths and is often used for a specific kind of job in the tech world for example C++ is a powerful beast when it comes to building amazing games or controlling physical objects like SmartWatches self-driving cars and all the cool gadgets on the other hand JavaScript is all about making websites interact Ive and dynamic so someone learning JavaScript and C++ at the same time is like someone trying to become a dentist and a heart surgeon at the same time let's be realistic if you only know bits of JavaScript and C++ you can't build either a game or a website if you want that coding job you have to focus on one language at a time and then learn the other tools and technologies that go with it so you can build something that employers will actually care about,True
7IoNR3q2Jcc,Is Coding Still Worth Learning in 2024?,#coding #programming #codewithmosh,2024-05-09T13:00:07Z,"web development, computer science, how to become a software engineer, coding, programming, programming with mosh, code with mosh, mosh hamedani, get a job",27.0,en,en,https://i.ytimg.com/vi/7IoNR3q2Jcc/default.jpg,PT35S,37337.0,1341.0,34.0,public,I got this question on this channel hey msh I'm 30 and I was planning to start a career as a programmer do you think this is wise commment question a lot of people are worried that AI is going to replace software Engineers so is coding still worth learning in 2024 well depends who you ask if you ask certain folks the ones who always seem miserable and say everything is going to collapse they will say no coding has no future but I've got a different take backed up by real word numbers check out my full video where I showed data that shows the continued demand for software engineers,True
tdFsel6-bgo,How to Get a Programming Job with No Experience,#coding #programming #codingadvice #codewithmosh,2024-05-08T13:01:00Z,"web development, computer science, how to become a software engineer, coding, programming, programming with mosh, code with mosh, mosh hamedani, get a job",27.0,en,en,https://i.ytimg.com/vi/tdFsel6-bgo/default.jpg,PT55S,22939.0,1402.0,30.0,public,you guys ask me this question all the time how can I get my first programming job when everyone wants at least two years of experience it's a valid concern so here's my solution do freelance work even for free help a friend a family member a local business build them a simple website or an app so you get a chance to solve real problems instead of just following tutorials you will have deadlines you will get feedback basically you will prove you can handle the whole development process that's what employeers are looking for now think like an employer who would you hire someone who has watched a million courses but delivered zero projects or someone who has built stuff once you have those projects then update your resume list a project the take you used and highlight your soft skills this is how you get your first programming job once you do that the rest gets way easier if you enjoy this video hit the like button and follow me for more coding advice,True
8jP78iP6zVM,Do you need a college degree to be a software engineer?,,2024-05-03T13:00:11Z,,27.0,en,en,https://i.ytimg.com/vi/8jP78iP6zVM/default.jpg,PT43S,21780.0,1357.0,30.0,public,do you really need a computer science degree to be a software engineer well it depends where you live in the US companies like Apple and Google are all about coding and problem solving skills not degrees more and more companies are catching on but some still filter candidates by degree look if you love getting a degree go for it but here is the truth most college programs are seriously outdated so if you think that degree is a golden ticket to a job think again you will spend four years and a lot of money to learn some outdated theoretical stuff that aren't used on the job so you'll still need to teach yourself all the up-to-day tech that employers actually care about hit the like button if you agree and follow me for more non-nonsense coding advice,True
Zl1hnNOAbFQ,50 Hour Courses Are a SCAM! Here's Why...,,2024-05-02T13:00:28Z,"coding, programming, learn to code, coding resources, learning to code, coding courses, programming with mosh, code with mosh, mosh hamedani",27.0,en,en,https://i.ytimg.com/vi/Zl1hnNOAbFQ/default.jpg,PT32S,17883.0,961.0,33.0,public,see those massive 50-hour courses promising you a job don't fall for it to learn the job there are many skills you need not just one language do you have 50 hours to spend on each of these skills needed for a web development job that's why most people don't finish these courses plus most of these courses are filled with fluff and repetition so longer doesn't mean better choose shorter focused courses that get you building projects fast that's the key to Landing a job not endless lectures follow me for more useful videos like this,True
cVMh0SIjp9k,YouTube Tutorials Won't Get You Hired,,2024-04-26T13:00:36Z,"how to learn to code, how to become a software engineer, software engineer, programming, computer science, big tech, day in the life of software engineer, leetcode, learn to code, learn to code for beginners, coding advice, coding mistakes, coding, coding for beginners, coding resources, code with mosh, programming with mosh, mosh hamedani, software engineering, web development",27.0,en,en,https://i.ytimg.com/vi/cVMh0SIjp9k/default.jpg,PT59S,20989.0,1424.0,22.0,public,listen I love a good YouTube tutorial but thinking you can land a coding job with those alone that's a recipe for disappointment here is the thing tutorials are great for quick fixes but they can give you this false sense of knowing stuff you jump from topic to topic feeling like you're learning but you're not building those deep in demand skills plus take changes so fast and chasing every new tutorial is a recipe for Burnout not a job to stand out in the job market you need a strategy first find your thing what makes you excited building websites mobile apps games AI decide and commit to a direction then check out job postings in your Niche what are they always asking for that's your must learn list once you have your list Master One skill at a time find a good course that goes deep not just surface level finish it build a project and prove you truly get it that's how you impress employers follow me for more useful videos like this,True
iw0znRuaYL8,The FASTEST Way to Learn Coding & Get a Job,,2024-04-25T13:00:42Z,"how to learn to code, how to become a software engineer, software engineer, programming, computer science, big tech, day in the life of software engineer, leetcode, learn to code, learn to code for beginners, coding advice, coding mistakes, coding, coding for beginners, coding resources, code with mosh, programming with mosh, mosh hamedani, software engineering, web development",27.0,en,en,https://i.ytimg.com/vi/iw0znRuaYL8/default.jpg,PT31S,35079.0,1482.0,18.0,public,after 20 years in Tech let me tell you this you don't need a computer science degree to be a software engineer for example one of my students was an electronics engineer he dedicated a year to learn coding and landed his first software engineering job doubling his salary in the process what you need is the right strategy not learning all programming languages in the world today I will share the fastest way to go from zero to a full-time software engineer ready to land your dream Tech job check out my full video link in the description,True
KkmSR7c9qLc,What is Automated Testing,#coding #programming #reactjs,2024-04-23T13:00:17Z,"react testing, react testing library, react testing tutorial, react testing tutorial for beginners, react testing with jest, react testing course, unit testing, code with mosh, programming with mosh, mosh hamedani, web development, vitest, jest, reactjs, react, automated testing",27.0,en,en,https://i.ytimg.com/vi/KkmSR7c9qLc/default.jpg,PT42S,11660.0,564.0,2.0,public,ever update your app and suddenly something is broken I know the feeling automated testing is the answer that means we write code to test our code this way every time we make changes to our app we can run hundreds or thousands of tests in seconds to quickly find out if you have accidentally broken anything this is much faster than manually testing every feature every time we update our code that's why take Giants pay big bucks for engineers who know automated testing so if you want to land better job opportunities you must have this critical scale on your resume I have a 1-hour tutorial that teaches you the fundamentals of unit testing react applications watch it now on my YouTube channel,True
4gX44uyGSHo,Is Coding Still Worth Learning in 2024?,"AI replacing coders? The REAL story about software engineering in 2024. Stats, trends, and the truth you need to know.

‚úã Stay connected

- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üìñ Chapters

00:00 - Is coding still worth learning in 2024?
01:16 - Is AI replacing software engineers?
02:12 - Impact of AI on software engineering
03:31 - The problem with AI-generated code 
05:15 - How AI can help software engineers 
05:53 - Does AI really make you code faster?
07:05 - Can one AI-powered engineer do the work of many?
08:07 - Future of software engineering 

#coding #techinsider #ai",2024-04-17T13:00:07Z,"learn to code, web development, artificial intelligence, coding job, code beginner, software engineering, self taught programmer, how to learn to code, web dev, career in tech, software developer job, coding, new grad software engineer, programming, code with mosh, programming with mosh, mosh hamedani",27.0,en,en,https://i.ytimg.com/vi/4gX44uyGSHo/default.jpg,PT9M33S,378730.0,11399.0,842.0,public,,False
FW49JfEXI3E,Never Leave VSCode Again!,#vscode #coding #programming,2024-04-16T13:00:23Z,"vscode, tutorial vscode, vs code, programming, vscode web developer, software developer tools, learn vscode in 6 minutes, coding, programming with mosh, mosh hamedani, code with mosh",27.0,en,en,https://i.ytimg.com/vi/FW49JfEXI3E/default.jpg,PT34S,25015.0,942.0,9.0,public,,False
Vrtx9G9lEuM,Python in 1 Minute,,2024-04-13T14:00:19Z,"python for beginners, python, python programming, programming, python for everybody, python tutorial, programming with mosh, computer programming, python tips, python from scratch, python coding, what is python, python language, code with mosh, mosh hamedani",27.0,en,en,https://i.ytimg.com/vi/Vrtx9G9lEuM/default.jpg,PT1M,270815.0,13094.0,89.0,public,,False
vE7Cy5csYbQ,Python in 2 Minutes!,"Get to know Python and why it's hated by C++ programmers! 

üîó Python tutorials 

https://youtu.be/kqtD5dpn9C8?si=Z9CtJNU1FStlnepW
https://youtu.be/_uQrJ0TkZlc?si=-mGZLOQn7YpLAlXJ

‚úã Stay connected

- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üìñ What's covered

00:00 - Why Python is so popular
00:10 - Applications of Python  
00:18 - Python ecosystem
00:34 - History of Python 
00:43 - Python interpreter 
00:52 - Hidden gems of Python 
01:01 - Basic Python syntax 
01:44 - What's with ""batteries included""

#python #programming #ai #coding",2024-04-12T13:01:00Z,"python for beginners, python, python programming, programming, python for everybody, python tutorial, programming with mosh, computer programming, python tips, python from scratch, python coding, what is python, python language, code with mosh, mosh hamedani",27.0,en,en,https://i.ytimg.com/vi/vE7Cy5csYbQ/default.jpg,PT1M59S,92239.0,2623.0,105.0,public,,False
nzzPMc1X_gM,Mind-Blowing AI:  This Tool Clones Voices Perfectly!,#coding #chatgpt #ai,2024-04-10T13:15:03Z,"voice engine, openai, open ai, chatgpt, chat gpt, code with mosh, programming with mosh, mosh hamedani, artificial intelligence, coding, programming",27.0,en,en,https://i.ytimg.com/vi/nzzPMc1X_gM/default.jpg,PT25S,11931.0,424.0,12.0,public,a UI tool lets you clone anyone's Voice using a 15-second sample here's an audio sample force is a push or pull that can make an object move and here's the AI generated voice some of the most amazing habitats on Earth are found in the rainforest sounds identical I've got more amazing examples plus the pros and cons of this crazy technology check out my full video link in the description,True
27YP6n6pDh0,The FASTEST Way to Learn to Code & Get a Job,"Ready to change your life? Learn how ordinary people transformed their careers with coding and landed high-paying tech jobs in a year. Step-by-step system inside!

‚úã Stay connected

- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/

üìñ Chapters

00:05 - Meet people who transformed their lives with code
00:59 - The coding trap that's slowing you down
01:28 - Your dream tech job: how to choose
01:44 - The roadmap to your coding success
02:07 - The right way to learn coding
02:52 - How to practice
03:37 - How to impress employers
03:56 - How to prepare for interviews
05:00 - Your job search action plan

#codingjourney #learntocode #leetcode  #programming #coding #techinsider",2024-04-09T13:00:06Z,"how to learn to code, how to become a software engineer, software engineer, programming, computer science, big tech, day in the life of software engineer, leetcode, learn to code, learn to code for beginners, coding advice, coding mistakes, coding, coding for beginners, coding resources, code with mosh, programming with mosh, mosh hamedani, software engineering, web development",27.0,en,en,https://i.ytimg.com/vi/27YP6n6pDh0/default.jpg,PT5M48S,164679.0,7247.0,314.0,public,"what if I told you it's possible to land a coding job in a year even without a computer science degree meet my student John he used to work as an aviation electrician earning $28,000 a year he dedicated 6 months to learn to code and landed his first developer job as a frontend developer boosting his salary to $552,000 now he's a full stack developer earning $90,000 a year John story is outstanding and quite frankly not everyone can get a job so quickly but I've seen tons of people people transform their careers through coding in a year this is Francisco he was an electronics engineer he learned to code and landed his first developer job within a year now he's a software architect earning 2 and a half times more than his previous job so are you curious how they did it and if you can achieve the same results in this video I'm sharing a stepbystep system plus actionable tips to help you break into the world of coding even if you are starting from scratch all right the biggest mistake I see beginners make is that they try to learn a bunch of languages like Python and JavaScript because somebody on YouTube told them they are popular so they assume that simply learning a few popular languages automatically makes them hirable but it doesn't work that way these languages have specific purposes and are often used in different kinds of jobs some of these languages are also unrelated so learning all of them together doesn't really prepare you for any kind of job so instead of focusing on Pro programming languages the first step is figuring out your dream take job do you want to build beautiful websites mobile apps games this decision will tell you what exactly you need to learn so you wouldn't waste time learning things that you're not going to use the next step is finding a learning path for the kind of work you want to do for example for web development you need to learn HTML CSS JavaScript and a bunch of other stuff now this applies to everything if game development gets you pumped that's a whole different set of tools so just do a simple search like game development learning path or data science learning path there are tons of road maps online the next step is learning and this is where I've seen a lot of people make common mistakes that slow them down the first mistake is that they go on YouTube and watch random disconnected tutorials trying to learn bits and pieces it takes far longer to learn something properly this way the other common mistake I see is people go on platforms like udemy and take these super long courses thinking that more hours means they will learn more but in reality they often never finish up those courses and all those unfinished courses pile up and make them feel less motivated here's the right way to learn find a properly structured course you think you can commit to and finish there's so many excellent options out there pick an instructor whose teaching style you like and then dedicate yourself to actually finishing each course now simply watching videos is not enough coding is about solving new problems so you have to constantly practice and that's what I love love about coding that's what inspired me to become a software engineer and not a medical doctor or lawyer because I wasn't great at memorizing but with coding you don't need to memorize much you need analytical and problem solving skills and with practice you will naturally memorize the stuff you need to know now the best way to practice is asking chat GPT for exercise or project ideas just tell it what you're learning and your skill level and it can suggest some options if the suggestions are too complex just ask for simpler ones it's a great way to find exercises and projects that will actually challenge you and help your progress now as you build projects make sure to put them on GitHub GitHub is like an online resume for developers you can put your code there and show it to potential employers plus you can get feedback from others in the community and improve your code there are also millions of projects on GitHub so you can look at other people's code and learn from them now let's talk about interviews a common mistake I see people make is not prepar ing for those coding interviews you can be a fantastic coder but interviews are their own Beast especially at those top tech companies like Google Facebook and so on they often ask you tricky questions about data structures and algorithms like how to reverse a link list this is one of the topics taught to computer science students so if you don't have a computer science degree make sure to study this topic in reality you might never use these algorithms in your day-to-day work but studying them helps you build your problem solving skill skills and stand out in interviews so along with all the things you have in your learning path make sure to take a course on data structures and algorithms to prepare for interviews a very useful website you can use to practice these interview questions is lead code you can filter questions by complexity or companies and so on it's a very useful website also there are websites that offer mock interviews with experienced developers so you can do a mock interview and get feedback about your weak spots and where you got to improve Pro all right once you're confident in your skills start applying for jobs but keep in mind you may apply for 100 jobs only here back from 10 to 20 and get five interviews it's totally normal don't take it personally and definitely don't let it discourage you remember you're not the only one applying the key here is persistence keep applying for new jobs and also connect with Recruiters on platforms like LinkedIn and Twitter until you land your first job quite frankly Landing the first job can be the hardest part but once you get your first job and have some real life experience under your belt finding those next opportunities becomes a whole lot easier now if you have any questions let me know in the comments below I'm here to help you and if you found this video helpful give it a like And subscribe for more useful content",True
kJOqIaGwQ7Y,Top Programming Languages to Learn in 2024 (For High-paying Jobs),"Overwhelmed by endless programming languages? This video helps you pick the PERFECT language to kickstart your dream tech career in 2024.

#coding #programming #ai

üí° Related videos:
https://youtu.be/kqtD5dpn9C8?si=GdgBBCVDReYHx3nm
https://youtu.be/W6NZfCO5SIk?si=rjEsYx9yfQcibK8h
https://youtu.be/qz0aGYrrlhU?si=JKTdhlA32GsyQndQ
https://youtu.be/ZzaPdXTrSb8?si=2BtlsfELp4l2CJT4
https://youtu.be/gfkTfcpWqAY?si=_zROEA2Krj2JDXt5
https://youtu.be/eIrMbAQSU34?si=3zqgIuSB6_OaYCCG
https://youtu.be/XKkoVpupYdw?si=w6tFGrNn0wO9Qyeo
https://youtu.be/HXH4yu227EQ?si=gYjEJcoUICdUAKbd


‚úã Stay connected:
- Twitter: https://twitter.com/moshhamedani
- Facebook: https://www.facebook.com/programmingwithmosh/
- Instagram: https://www.instagram.com/codewithmosh.official/
- LinkedIn: https://www.linkedin.com/school/codewithmosh/


üìñ What's covered
00:00 Introduction
00:26 Is AI Replacing Coders?
00:45 The Hard Truth About Coding
01:24 Languages for Web Development
02:29 Languages for Mobile Development
03:43 Languages for Game Development
04:10 Languages for Embedded Systems
04:50 Languages for AI & Machine Learning",2024-04-02T13:00:50Z,"best programming languages, how to learn coding, programming, python, c++, javascript, how to code, programming with mosh, code with mosh, mosh hamedani, ranking programming languages, web development, game development, mobile development, embedded systems, ai, machine learning",27.0,en,en,https://i.ytimg.com/vi/kJOqIaGwQ7Y/default.jpg,PT5M32S,523541.0,16804.0,1389.0,public,if you're new to coding and feeling overwhelmed by all those programming languages out there I totally get it it's easy to get stuck jumping from one language to another and feeling like you are getting nowhere in this video I'm going to give you a road map so you can decide which languages are the best fit for your dream Tech job and help you get there faster we'll explore different career paths and the languages that power them now before we get started I need to mention that some folks might be worried about about AI taking over software development jobs that's a whole other topic but let me just say this AI is going to be a powerful tool for developers not a replacement I cover this in detail in two other videos links are down below if you're curious also I need to tell you a fact simply learning a programming language isn't a golden ticket to a job right away so don't be fooled by YouTube videos giving you such promises Landing a tech job usually takes a combination of skills a programming language is one of them and it's the first step in this video our focus is only on languages and nothing else now to decide what language to learn first you have to figure out what kind of Tech Career you want so what makes you excited do you like building amazing websites mobile apps games or software that controls physical objects what do you want to do let's talk about each of these paths and the languages they use let's start with web development if you dream of building beautiful websites or even online games this is the path for you now when web development has two main sites front-end and backend development front-end development is all about what the user sees and interacts with your key tools will be HTML CSS and JavaScript with HTML we can structure our web pages and their content with CSS we can make them pretty and with JavaScript we can make them Dynamic so we can respond to user actions like clicks and drags and do cool things now backend development is the behindth scenes Magic databases servers and the logic that makes everything work now here we have a few options we can use JavaScript python Java PHP C and so on now as we can see if you learn JavaScript you can use it both for the front end and backend development so you don't need to learn one extra language for backend development and guess what if you can build both the front end and backend together you're essentially a full stack developer with a higher salary okay now let's talk about mobile development here we have two main paths native and crossplatform development native development means we build apps specifically for either Android or iOS for Android Java is a classic choice but cotlin is becoming the modern favorite for iOS your go-to language will be swift but Objective C is still used for older projects now crossplatform development lets you use a single code base to create apps for both Android and iOS saving time and resources here we have two popular choices for building mobile apps react native and flutter these are not programming languages they tools or Frameworks they allow you to build user interfaces and access things like the camera GPS or motion sensors now depending on your location there might be slightly more job opportunities for one or the other so jump on popular job searching websites and do a bit of research on the job market now if you want to use flutter you have to learn Dart if you want to use react native you have to learn JavaScript so as you can see if you learn JavaScript you can use it for frontend development backend development and mobile development giving you plenty of opportunities now let's talk about game development to build games we have to use a game engine we have two popular game engines which are unity and Unreal Engine Unity is a bit more beginner friendly and is often used in small to medium-sized game studios onreal engine is a bit more advanced and is used in large scale games that are visually stunning for Unity you have to learn C for Unreal Engine you have to learn C++ all right now let's talk about embedded systems this field is all about building software that can control Real World objects like smart watches self-driving cars medical robots appliances and so on here we have a few choices C and C++ which are the tried and true languages for embedded systems they let you talk directly to the hardware for Max maimum control but you can also learn rust which is a newer language that is all about safety and speed it's perfect for making sure your smart devices work perfectly without errors again before deciding which language to learn first do a bit of research and find out which language offers more job opportunities in your location all right the last career path we're going to talk about is AI and machine learning a field that is rapidly shaping how we interact with technology if that's something you're excited about High is the go-to language for data science and machine learning we also have R Which is popular for statistical Computing and creating beautiful data visualizations now I'm super curious which language do you want to learn after this video let me know in the comments below and remember I'm here to help so if I missed anything or if you have any questions don't hesitate to ask let me know in the comments so I can create more helpful content for you and finally if you found this video helpful give it a like And subscribe for more helpful videos,True
E9BXvDElDlw,VSCode Trick: Stop Wasting Time Finding Files,#vscode #coding #programming,2024-03-27T14:00:49Z,"vscode, tutorial vscode, vs code, programming, vscode web developer, software developer tools, learn vscode in 6 minutes, coding, programming with mosh, mosh hamedani, code with mosh",27.0,en,en,https://i.ytimg.com/vi/E9BXvDElDlw/default.jpg,PT55S,22104.0,1138.0,12.0,public,in this video I'm going to show you one of my favorite shortcuts in vs code and that's go to file let's say we're looking for a file called product list one way to find it is to go to our project and dig into various folders to find that file this is timec consuming there's a faster way we can press command and P on Mac or control and P on Windows this brings up the search box now here we can type product list and this shows all files matching this pattern but there's a fast surve we don't even have to type the full file name we can type abbreviations for example we can type prod list and again we get all files matching this pattern now if you're looking for a file called Product list. test. TSX again we don't have to type the full file name here we can just type test to narrow down the search result follow me for more useful videos like this,True
#NAME?,Endless YouTube Tutorials Are Wasting Your Time,#coding #programming,2024-03-26T14:00:32Z,,27.0,en,en,https://i.ytimg.com/vi/-mA2HV1f4Go/default.jpg,PT59S,14789.0,813.0,18.0,public,,False
